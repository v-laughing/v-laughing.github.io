import{_ as e,c as s,o as a,a4 as l}from"./chunks/framework.DdddRsJj.js";const k=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"cs/web/guide.md","filePath":"cs/web/guide.md"}'),t={name:"cs/web/guide.md"};function o(d,i,c,n,r,p){return a(),s("div",null,[...i[0]||(i[0]=[l(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h2><h3 id="bem" tabindex="-1">BEM <a class="header-anchor" href="#bem" aria-label="Permalink to &quot;BEM&quot;">​</a></h3><p>用语义化的类名来定义元素的选择器，同时遵循命名规则来避免名字冲突。典型的形式为：<code>B__E--M</code>。理想情况下，类选择器没有嵌套。</p><p>Block 区块：独立且可复用的一个组件。 Element 元素：依赖于Block的元素，同时本身不能是Block。 Modifier 修饰符：定义Block 和Element 的外观、状态或类型。</p><p><strong>命名空间</strong> 根据组件或页面的用途赋予其中的元素的类一个前缀的空间名字。如，</p><ul><li><code>l-</code>（Layout）</li><li><code>c-</code>（Component）</li><li><code>u-</code>（Utility）</li><li><code>is</code>/ <code>has-</code>（States）</li><li><code>js-</code>（JavaScript hooks）</li></ul><p><strong>Utility</strong> 定义常用的样式，一般会加上<code>! importance</code>。</p><ul><li>Margin/padding</li><li>Text (colors, size, styles)</li><li>Common Background Colors</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/* margin-top large */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;u-mtLarge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>states</strong> 表示组件的当前状态。</p><ul><li><code>is-active</code></li><li><code>has-loaded</code></li><li><code>is-loading</code></li><li><code>is-visible</code></li><li><code>is-disabled</code></li><li><code>is-expanded</code></li><li><code>is-collapsed</code></li></ul><p><strong>JavaScript hooks</strong><code>js-</code>表示组件用到JavaScript。</p>`,13)])])}const g=e(t,[["render",o]]);export{k as __pageData,g as default};
