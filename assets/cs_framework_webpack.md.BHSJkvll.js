import{_ as e,c as a,o as t,a4 as p}from"./chunks/framework.CBsUJNCA.js";const u=JSON.parse('{"title":"webpack","description":"","frontmatter":{"title":"webpack","sidebar":"auto","publish":true},"headers":[],"relativePath":"cs/framework/webpack.md","filePath":"cs/framework/webpack.md"}'),r={name:"cs/framework/webpack.md"},o=p('<h2 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h2><p>简化页面依赖的管理，通过将页面打包为一个文件来降低页面加载时请求的资源数。</p><p>将每个资源视为一个模块，把页面逻辑当作一个整体。webpack 从入口文件开始，找到所有的依赖文件，将各个依赖文件模块通过 loader 和 plugins 处理后，打包成一个或多个 bundle。</p><p>Webpack 具有四个核心的概念，分别是 Entry（入口）、Output（输出）、loader 和 Plugins（插件）。</p><p><strong>Entry</strong>： webpack 的入口起点，它指示 webpack 应该从哪个模块开始着手，来作为其构建内部依赖图的开始。</p><p><strong>Output</strong>：告诉 webpack 在哪里输出它所创建的打包文件，也可指定打包文件的名称，默认位置为 ./dist。</p><p><strong>loader</strong>： webpack 的编译器，将各种类型的资源转换成 JavaScript 模块，可以指定处理哪些文件或通过什么工具预处理哪些文件。</p><p><strong>Plugins</strong>：包括打包、优化、压缩、搭建服务器等等。</p><blockquote><p>配置很麻烦</p></blockquote>',9),c=[o];function s(n,_,i,k,l,b){return t(),a("div",null,c)}const w=e(r,[["render",s]]);export{u as __pageData,w as default};
