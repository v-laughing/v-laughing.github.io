import{_ as s,c as i,o as t,a4 as e}from"./chunks/framework.DdddRsJj.js";const n="/assets/image-20191209002818626.Dfx0MT7s.png",l="/assets/924914c0-660c-4e4a-bbc0-1df1146e7516.Dtq5vQHu.jpg",p="/assets/f9f2a16b-4843-44d1-9759-c745772e9bcf.D4ggpwTB.jpg",h="/assets/f0574025-c514-49f5-a591-6d6a71f271f7.sFUOZgkP.jpg",r="/assets/6729baa0-57d7-4817-b3aa-518cbccf824c.DRng9ad3.jpg",d="/assets/GUID_Partition_Table_Scheme.svg.B1wViVB7.png",o="/assets/50831a6f-2777-46ea-a571-29f23c85cc21.Ba2PQdi6.jpg",c="/assets/f900f266-a323-42b2-bc43-218fdb8811a8.LtNIV8FX.jpg",k="/assets/BSD_disk.Cy2l5qFl.png",E="/assets/12a65cc6-20e0-4706-9fe6-3ba49413d7f6.BXrhlSRW.png",g="data:image/png;base64,",b="/assets/inode_with_signatures.Bm94bopi.jpg",u="/assets/linux-filesystem.DDGFDO-I.png",m="data:image/png;base64,",y="/assets/658fc5e7-79c0-4247-9445-d69bf194c539.Dfz-nRZb.png",B=JSON.parse('{"title":"一、常用操作以及概念","description":"","frontmatter":{},"headers":[],"relativePath":"cs/linux/Linux.md","filePath":"cs/linux/Linux.md"}'),v={name:"cs/linux/Linux.md"};function x(f,a,q,C,_,P){return t(),i("div",null,[...a[0]||(a[0]=[e(`<h1 id="一、常用操作以及概念" tabindex="-1">一、常用操作以及概念 <a class="header-anchor" href="#一、常用操作以及概念" aria-label="Permalink to &quot;一、常用操作以及概念&quot;">​</a></h1><h2 id="快捷键" tabindex="-1">快捷键 <a class="header-anchor" href="#快捷键" aria-label="Permalink to &quot;快捷键&quot;">​</a></h2><ul><li>Tab：命令和文件名补全；</li><li>Ctrl+C：中断正在运行的程序；</li><li>Ctrl+D：结束键盘输入（End Of File，EOF）</li></ul><h2 id="求助" tabindex="-1">求助 <a class="header-anchor" href="#求助" aria-label="Permalink to &quot;求助&quot;">​</a></h2><h3 id="_1-help" tabindex="-1">1. --help <a class="header-anchor" href="#_1-help" aria-label="Permalink to &quot;1. --help&quot;">​</a></h3><p>指令的基本用法与选项介绍。</p><h3 id="_2-man" tabindex="-1">2. man <a class="header-anchor" href="#_2-man" aria-label="Permalink to &quot;2. man&quot;">​</a></h3><p>man 是 manual 的缩写，将指令的具体信息显示出来。</p><p>当执行 <code>man date</code> 时，有 DATE(1) 出现，其中的数字代表指令的类型，常用的数字及其类型如下：</p><table tabindex="0"><thead><tr><th style="text-align:center;">代号</th><th>类型</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td>用户在 shell 环境中可以操作的指令或者可执行文件</td></tr><tr><td style="text-align:center;">5</td><td>配置文件</td></tr><tr><td style="text-align:center;">8</td><td>系统管理员可以使用的管理指令</td></tr></tbody></table><h3 id="_3-info" tabindex="-1">3. info <a class="header-anchor" href="#_3-info" aria-label="Permalink to &quot;3. info&quot;">​</a></h3><p>info 与 man 类似，但是 info 将文档分成一个个页面，每个页面可以跳转。</p><h3 id="_4-doc" tabindex="-1">4. doc <a class="header-anchor" href="#_4-doc" aria-label="Permalink to &quot;4. doc&quot;">​</a></h3><p>/usr/share/doc 存放着软件的一整套说明文件。</p><h2 id="关机" tabindex="-1">关机 <a class="header-anchor" href="#关机" aria-label="Permalink to &quot;关机&quot;">​</a></h2><h3 id="_1-who" tabindex="-1">1. who <a class="header-anchor" href="#_1-who" aria-label="Permalink to &quot;1. who&quot;">​</a></h3><p>在关机前需要先使用 who 命令查看有没有其它用户在线。</p><h3 id="_2-sync" tabindex="-1">2. sync <a class="header-anchor" href="#_2-sync" aria-label="Permalink to &quot;2. sync&quot;">​</a></h3><p>为了加快对磁盘文件的读写速度，位于内存中的文件数据不会立即同步到磁盘，因此关机之前需要先进行 sync 同步操作。</p><h3 id="_3-shutdown" tabindex="-1">3. shutdown <a class="header-anchor" href="#_3-shutdown" aria-label="Permalink to &quot;3. shutdown&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># shutdown [-krhc] 时间 [信息]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-k ： 不会关机，只是发送警告信息，通知所有在线的用户</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-r ： 将系统的服务停掉后就重新启动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-h ： 将系统的服务停掉后就立即关机</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-c ： 取消已经在进行的 shutdown</span></span></code></pre></div><h2 id="path" tabindex="-1">PATH <a class="header-anchor" href="#path" aria-label="Permalink to &quot;PATH&quot;">​</a></h2><p>可以在环境变量 PATH 中声明可执行文件的路径，路径之间用 : 分隔。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin</span></span></code></pre></div><h2 id="sudo" tabindex="-1">sudo <a class="header-anchor" href="#sudo" aria-label="Permalink to &quot;sudo&quot;">​</a></h2><p>sudo 允许一般用户使用 root 可执行的命令，不过只有在 /etc/sudoers 配置文件中添加的用户才能使用该指令。</p><h2 id="包管理工具" tabindex="-1">包管理工具 <a class="header-anchor" href="#包管理工具" aria-label="Permalink to &quot;包管理工具&quot;">​</a></h2><p>RPM 和 DPKG 为最常见的两类软件包管理工具：</p><ul><li>RPM 全称为 Redhat Package Manager，最早由 Red Hat 公司制定实施，随后被 GNU 开源操作系统接受并成为许多 Linux 系统的既定软件标准。YUM 基于 RPM，具有依赖管理和软件升级功能。</li><li>与 RPM 竞争的是基于 Debian 操作系统的 DEB 软件包管理工具 DPKG，全称为 Debian Package，功能方面与 RPM 相似。</li></ul><h2 id="发行版" tabindex="-1">发行版 <a class="header-anchor" href="#发行版" aria-label="Permalink to &quot;发行版&quot;">​</a></h2><p>Linux 发行版是 Linux 内核及各种应用软件的集成版本。</p><table tabindex="0"><thead><tr><th style="text-align:center;">基于的包管理工具</th><th style="text-align:center;">商业发行版</th><th style="text-align:center;">社区发行版</th></tr></thead><tbody><tr><td style="text-align:center;">RPM</td><td style="text-align:center;">Red Hat</td><td style="text-align:center;">Fedora / CentOS</td></tr><tr><td style="text-align:center;">DPKG</td><td style="text-align:center;">Ubuntu</td><td style="text-align:center;">Debian</td></tr></tbody></table><h2 id="vim-三个模式" tabindex="-1">VIM 三个模式 <a class="header-anchor" href="#vim-三个模式" aria-label="Permalink to &quot;VIM 三个模式&quot;">​</a></h2><p><img src="`+n+'" alt="avatar"><br></p><ul><li>一般指令模式（Command mode）：VIM 的默认模式，可以用于移动游标查看内容；</li><li>编辑模式（Insert mode）：按下 &quot;i&quot; 等按键之后进入，可以对文本进行编辑；</li><li>指令列模式（Bottom-line mode）：按下 &quot;:&quot; 按键之后进入，用于保存退出等操作。</li></ul><p>在指令列模式下，有以下命令用于离开或者保存文件。</p><table tabindex="0"><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">:w</td><td style="text-align:center;">写入磁盘</td></tr><tr><td style="text-align:center;">:w!</td><td style="text-align:center;">当文件为只读时，强制写入磁盘。到底能不能写入，与用户对该文件的权限有关</td></tr><tr><td style="text-align:center;">:q</td><td style="text-align:center;">离开</td></tr><tr><td style="text-align:center;">:q!</td><td style="text-align:center;">强制离开不保存</td></tr><tr><td style="text-align:center;">:wq</td><td style="text-align:center;">写入磁盘后离开</td></tr><tr><td style="text-align:center;">:wq!</td><td style="text-align:center;">强制写入磁盘后离开</td></tr></tbody></table><h2 id="gnu" tabindex="-1">GNU <a class="header-anchor" href="#gnu" aria-label="Permalink to &quot;GNU&quot;">​</a></h2><p>GNU 计划，译为革奴计划，它的目标是创建一套完全自由的操作系统，称为 GNU，其内容软件完全以 GPL 方式发布。其中 GPL 全称为 GNU 通用公共许可协议（GNU General Public License），包含了以下内容：</p><ul><li>以任何目的运行此程序的自由；</li><li>再复制的自由；</li><li>改进此程序，并公开发布改进的自由。</li></ul><h2 id="开源协议" tabindex="-1">开源协议 <a class="header-anchor" href="#开源协议" aria-label="Permalink to &quot;开源协议&quot;">​</a></h2><ul><li><a href="https://choosealicense.com/" target="_blank" rel="noreferrer">Choose an open source license</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noreferrer">如何选择开源许可证？</a></li></ul><h1 id="二、磁盘" tabindex="-1">二、磁盘 <a class="header-anchor" href="#二、磁盘" aria-label="Permalink to &quot;二、磁盘&quot;">​</a></h1><h2 id="磁盘接口" tabindex="-1">磁盘接口 <a class="header-anchor" href="#磁盘接口" aria-label="Permalink to &quot;磁盘接口&quot;">​</a></h2><h3 id="_1-ide" tabindex="-1">1. IDE <a class="header-anchor" href="#_1-ide" aria-label="Permalink to &quot;1. IDE&quot;">​</a></h3><p>IDE（ATA）全称 Advanced Technology Attachment，接口速度最大为 133MB/s，因为并口线的抗干扰性太差，且排线占用空间较大，不利电脑内部散热，已逐渐被 SATA 所取代。</p><p><img src="'+l+'" alt="avatar | 400"><br></p><h3 id="_2-sata" tabindex="-1">2. SATA <a class="header-anchor" href="#_2-sata" aria-label="Permalink to &quot;2. SATA&quot;">​</a></h3><p>SATA 全称 Serial ATA，也就是使用串口的 ATA 接口，抗干扰性强，且对数据线的长度要求比 ATA 低很多，支持热插拔等功能。SATA-II 的接口速度为 300MB/s，而 SATA-III 标准可达到 600MB/s 的传输速度。SATA 的数据线也比 ATA 的细得多，有利于机箱内的空气流通，整理线材也比较方便。</p><p><img src="'+p+'" alt="avatar"><br></p><h3 id="_3-scsi" tabindex="-1">3. SCSI <a class="header-anchor" href="#_3-scsi" aria-label="Permalink to &quot;3. SCSI&quot;">​</a></h3><p>SCSI 全称是 Small Computer System Interface（小型机系统接口），SCSI 硬盘广为工作站以及个人电脑以及服务器所使用，因此会使用较为先进的技术，如碟片转速 15000rpm 的高转速，且传输时 CPU 占用率较低，但是单价也比相同容量的 ATA 及 SATA 硬盘更加昂贵。</p><p><img src="'+h+'" alt="avatar"><br></p><h3 id="_4-sas" tabindex="-1">4. SAS <a class="header-anchor" href="#_4-sas" aria-label="Permalink to &quot;4. SAS&quot;">​</a></h3><p>SAS（Serial Attached SCSI）是新一代的 SCSI 技术，和 SATA 硬盘相同，都是采取序列式技术以获得更高的传输速度，可达到 6Gb/s。此外也通过缩小连接线改善系统内部空间等。</p><p><img src="'+r+'" alt="avatar"><br></p><h2 id="磁盘的文件名" tabindex="-1">磁盘的文件名 <a class="header-anchor" href="#磁盘的文件名" aria-label="Permalink to &quot;磁盘的文件名&quot;">​</a></h2><p>Linux 中每个硬件都被当做一个文件，包括磁盘。磁盘以磁盘接口类型进行命名，常见磁盘的文件名如下：</p><ul><li>IDE 磁盘：/dev/hd[a-d]</li><li>SATA/SCSI/SAS 磁盘：/dev/sd[a-p]</li></ul><p>其中文件名后面的序号的确定与系统检测到磁盘的顺序有关，而与磁盘所插入的插槽位置无关。</p><h1 id="三、分区" tabindex="-1">三、分区 <a class="header-anchor" href="#三、分区" aria-label="Permalink to &quot;三、分区&quot;">​</a></h1><h2 id="分区表" tabindex="-1">分区表 <a class="header-anchor" href="#分区表" aria-label="Permalink to &quot;分区表&quot;">​</a></h2><p>磁盘分区表主要有两种格式，一种是限制较多的 MBR 分区表，一种是较新且限制较少的 GPT 分区表。</p><h3 id="_1-mbr" tabindex="-1">1. MBR <a class="header-anchor" href="#_1-mbr" aria-label="Permalink to &quot;1. MBR&quot;">​</a></h3><p>MBR 中，第一个扇区最重要，里面有主要开机记录（Master boot record, MBR）及分区表（partition table），其中主要开机记录占 446 bytes，分区表占 64 bytes。</p><p>分区表只有 64 bytes，最多只能存储 4 个分区，这 4 个分区为主分区（Primary）和扩展分区（Extended）。其中扩展分区只有一个，它使用其它扇区来记录额外的分区表，因此通过扩展分区可以分出更多分区，这些分区称为逻辑分区。</p><p>Linux 也把分区当成文件，分区文件的命名方式为：磁盘文件名 + 编号，例如 /dev/sda1。注意，逻辑分区的编号从 5 开始。</p><h3 id="_2-gpt" tabindex="-1">2. GPT <a class="header-anchor" href="#_2-gpt" aria-label="Permalink to &quot;2. GPT&quot;">​</a></h3><p>扇区是磁盘的最小存储单位，旧磁盘的扇区大小通常为 512 bytes，而最新的磁盘支持 4 k。GPT 为了兼容所有磁盘，在定义扇区上使用逻辑区块地址（Logical Block Address, LBA），LBA 默认大小为 512 bytes。</p><p>GPT 第 1 个区块记录了主要开机记录（MBR），紧接着是 33 个区块记录分区信息，并把最后的 33 个区块用于对分区信息进行备份。这 33 个区块第一个为 GPT 表头纪录，这个部份纪录了分区表本身的位置与大小和备份分区的位置，同时放置了分区表的校验码 (CRC32)，操作系统可以根据这个校验码来判断 GPT 是否正确。若有错误，可以使用备份分区进行恢复。</p><p>GPT 没有扩展分区概念，都是主分区，每个 LBA 可以分 4 个分区，因此总共可以分 4 * 32 = 128 个分区。</p><p>MBR 不支持 2.2 TB 以上的硬盘，GPT 则最多支持到 2<sup>33</sup> TB = 8 ZB。</p><p><img src="'+d+'" alt="avatar | 400"><br></p><h2 id="开机检测程序" tabindex="-1">开机检测程序 <a class="header-anchor" href="#开机检测程序" aria-label="Permalink to &quot;开机检测程序&quot;">​</a></h2><h3 id="_1-bios" tabindex="-1">1. BIOS <a class="header-anchor" href="#_1-bios" aria-label="Permalink to &quot;1. BIOS&quot;">​</a></h3><p>BIOS（Basic Input/Output System，基本输入输出系统），它是一个固件（嵌入在硬件中的软件），BIOS 程序存放在断电后内容不会丢失的只读内存中。</p><p><img src="'+o+'" alt="avatar"><br></p><p>BIOS 是开机的时候<mark>计算机执行的第一个程序</mark>，这个程序知道可以开机的磁盘，并读取磁盘第一个扇区的主要开机记录（MBR），由主要开机记录（MBR）执行其中的开机管理程序，这个开机管理程序会加载操作系统的核心文件。</p><p>主要开机记录（MBR）中的开机管理程序提供以下功能：选单、载入核心文件以及转交其它开机管理程序。转交这个功能可以用来实现多重引导，只需要将另一个操作系统的开机管理程序安装在其它分区的启动扇区上，在启动开机管理程序时，就可以通过选单选择启动当前的操作系统或者转交给其它开机管理程序从而启动另一个操作系统。</p><p>下图中，第一扇区的主要开机记录（MBR）中的开机管理程序提供了两个选单：M1、M2，M1 指向了 Windows 操作系统，而 M2 指向其它分区的启动扇区，里面包含了另外一个开机管理程序，提供了一个指向 Linux 的选单。</p><p><img src="'+c+'" alt="avatar | 600"><br></p><p>安装多重引导，最好先安装 Windows 再安装 Linux。因为安装 Windows 时会覆盖掉主要开机记录（MBR），而 Linux 可以选择将开机管理程序安装在主要开机记录（MBR）或者其它分区的启动扇区，并且可以设置开机管理程序的选单。</p><h3 id="_2-uefi" tabindex="-1">2. UEFI <a class="header-anchor" href="#_2-uefi" aria-label="Permalink to &quot;2. UEFI&quot;">​</a></h3><p>BIOS 不可以读取 GPT 分区表，而 UEFI 可以。</p><h1 id="四、文件系统" tabindex="-1">四、文件系统 <a class="header-anchor" href="#四、文件系统" aria-label="Permalink to &quot;四、文件系统&quot;">​</a></h1><h2 id="分区与文件系统" tabindex="-1">分区与文件系统 <a class="header-anchor" href="#分区与文件系统" aria-label="Permalink to &quot;分区与文件系统&quot;">​</a></h2><p>对分区进行格式化是为了在分区上建立文件系统。一个分区通常只能格式化为一个文件系统，但是磁盘阵列等技术可以将一个分区格式化为多个文件系统。</p><h2 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h2><p>最主要的几个组成部分如下：</p><ul><li>inode：<mark>一个文件占用一个 inode</mark>，记录文件的属性，同时记录此文件的内容所在的 block 编号；</li><li>block：记录文件的内容，文件太大时，会占用多个 block。</li></ul><p>除此之外还包括：</p><ul><li>superblock：记录文件系统的整体信息，包括 inode 和 block 的总量、使用量、剩余量，以及文件系统的格式与相关信息等；</li><li>block bitmap：记录 block 是否被使用的位图。</li></ul><p><img src="'+k+'" alt="avatar | 800"><br></p><h2 id="文件读取" tabindex="-1">文件读取 <a class="header-anchor" href="#文件读取" aria-label="Permalink to &quot;文件读取&quot;">​</a></h2><p>对于 Ext2 文件系统，当要读取一个文件的内容时，先在 inode 中查找文件内容所在的所有 block，然后把所有 block 的内容读出来。</p><p><img src="'+E+'" alt="avatar | 500"><br></p><p>而对于 FAT 文件系统，它没有 inode，每个 block 中存储着下一个 block 的编号。</p><p><img src="'+g+'" alt="avatar | 500"><br></p><h2 id="磁盘碎片" tabindex="-1">磁盘碎片 <a class="header-anchor" href="#磁盘碎片" aria-label="Permalink to &quot;磁盘碎片&quot;">​</a></h2><p>指一个文件内容所在的 block 过于分散，导致磁盘磁头移动距离过大，从而降低磁盘读写性能。</p><h2 id="block" tabindex="-1">block <a class="header-anchor" href="#block" aria-label="Permalink to &quot;block&quot;">​</a></h2><p>在 Ext2 文件系统中所支持的 block 大小有 1K，2K 及 4K 三种，不同的大小限制了单个文件和文件系统的最大大小。</p><table tabindex="0"><thead><tr><th style="text-align:center;">大小</th><th style="text-align:center;">1KB</th><th style="text-align:center;">2KB</th><th style="text-align:center;">4KB</th></tr></thead><tbody><tr><td style="text-align:center;">最大单一文件</td><td style="text-align:center;">16GB</td><td style="text-align:center;">256GB</td><td style="text-align:center;">2TB</td></tr><tr><td style="text-align:center;">最大文件系统</td><td style="text-align:center;">2TB</td><td style="text-align:center;">8TB</td><td style="text-align:center;">16TB</td></tr></tbody></table><p>一个 block 只能被一个文件所使用，未使用的部分直接浪费了。因此如果需要存储大量的小文件，那么最好选用比较小的 block。</p><h2 id="inode" tabindex="-1">inode <a class="header-anchor" href="#inode" aria-label="Permalink to &quot;inode&quot;">​</a></h2><p>inode 具体包含以下信息：</p><ul><li>权限 (read/write/excute)；</li><li>拥有者与群组 (owner/group)；</li><li>容量；</li><li>建立或状态改变的时间 (ctime)；</li><li>最近读取时间 (atime)；</li><li>最近修改时间 (mtime)；</li><li>定义文件特性的旗标 (flag)，如 SetUID...；</li><li>该文件真正内容的指向 (pointer)。</li></ul><p>inode 具有以下特点：</p><ul><li>每个 inode 大小均固定为 128 bytes (新的 ext4 与 xfs 可设定到 256 bytes)；</li><li>每个文件都仅会占用一个 inode。</li></ul><p>inode 中记录了文件内容所在的 block 编号，但是每个 block 非常小，一个大文件随便都需要几十万的 block。而一个 inode 大小有限，无法直接引用这么多 block 编号。因此引入了间接、双间接、三间接引用。间接引用让 inode 记录的引用 block 块记录引用信息。</p><p><img src="'+b+'" alt="avatar | 600"><br></p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><p>建立一个目录时，会分配一个 inode 与至少一个 block。block 记录的内容是目录下所有文件的 inode 编号以及文件名。</p><p>可以看到文件的 inode 本身不记录文件名，<mark>文件名记录在目录中</mark>，因此新增文件、删除文件、更改文件名这些操作与目录的写权限有关。</p><h2 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h2><p>如果突然断电，那么文件系统会发生错误，例如断电前只修改了 block bitmap，而还没有将数据真正写入 block 中。</p><p>ext3/ext4 文件系统引入了日志功能，可以利用日志来修复文件系统。</p><h2 id="挂载" tabindex="-1">挂载 <a class="header-anchor" href="#挂载" aria-label="Permalink to &quot;挂载&quot;">​</a></h2><p>挂载利用目录作为文件系统的进入点，也就是说，进入目录之后就可以读取文件系统的数据。</p><h2 id="目录配置" tabindex="-1">目录配置 <a class="header-anchor" href="#目录配置" aria-label="Permalink to &quot;目录配置&quot;">​</a></h2><p>为了使不同 Linux 发行版本的目录结构保持一致性，Filesystem Hierarchy Standard (FHS) 规定了 Linux 的目录结构。最基础的三个目录如下：</p><ul><li>/ (root, 根目录)</li><li>/usr (unix software resource)：所有系统默认软件都会安装到这个目录；</li><li>/var (variable)：存放系统或程序运行过程中的数据文件。</li></ul><p><img src="'+u+`" alt="avatar"><br></p><h1 id="五、文件" tabindex="-1">五、文件 <a class="header-anchor" href="#五、文件" aria-label="Permalink to &quot;五、文件&quot;">​</a></h1><h2 id="文件属性" tabindex="-1">文件属性 <a class="header-anchor" href="#文件属性" aria-label="Permalink to &quot;文件属性&quot;">​</a></h2><p>用户分为三种：文件拥有者、群组以及其它人，对不同的用户有不同的文件权限。</p><p>使用 ls 查看一个文件时，会显示一个文件的信息，例如 <code>drwxr-xr-x 3 root root 17 May 6 00:14 .config</code>，对这个信息的解释如下：</p><ul><li>drwxr-xr-x：文件类型以及权限，第 1 位为文件类型字段，后 9 位为文件权限字段</li><li>3：链接数</li><li>root：文件拥有者</li><li>root：所属群组</li><li>17：文件大小</li><li>May 6 00:14：文件最后被修改的时间</li><li>.config：文件名</li></ul><p>常见的文件类型及其含义有：</p><ul><li>d：目录</li><li>-：文件</li><li>l：链接文件</li></ul><p>9 位的文件权限字段中，每 3 个为一组，共 3 组，每一组分别代表对文件拥有者、所属群组以及其它人的文件权限。一组权限中的 3 位分别为 r、w、x 权限，表示可读、可写、可执行。</p><p>文件时间有以下三种：</p><ul><li>modification time (mtime)：文件的内容更新就会更新；</li><li>status time (ctime)：文件的状态（权限、属性）更新就会更新；</li><li>access time (atime)：读取文件时就会更新。</li></ul><h2 id="文件与目录的基本操作" tabindex="-1">文件与目录的基本操作 <a class="header-anchor" href="#文件与目录的基本操作" aria-label="Permalink to &quot;文件与目录的基本操作&quot;">​</a></h2><h3 id="_1-ls" tabindex="-1">1. ls <a class="header-anchor" href="#_1-ls" aria-label="Permalink to &quot;1. ls&quot;">​</a></h3><p>列出文件或者目录的信息，目录的信息就是其中包含的文件。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># ls [-aAdfFhilnrRSt] file|dir</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-a ：列出全部的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d ：仅列出目录本身</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-l ：以长数据串行列出，包含文件的属性与权限等等数据</span></span></code></pre></div><h3 id="_2-cd" tabindex="-1">2. cd <a class="header-anchor" href="#_2-cd" aria-label="Permalink to &quot;2. cd&quot;">​</a></h3><p>更换当前目录。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd [相对路径或绝对路径]</span></span></code></pre></div><h3 id="_3-mkdir" tabindex="-1">3. mkdir <a class="header-anchor" href="#_3-mkdir" aria-label="Permalink to &quot;3. mkdir&quot;">​</a></h3><p>创建目录。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># mkdir [-mp] 目录名称</span></span>
<span class="line"><span>-m ：配置目录权限</span></span>
<span class="line"><span>-p ：递归创建目录</span></span></code></pre></div><h3 id="_4-rmdir" tabindex="-1">4. rmdir <a class="header-anchor" href="#_4-rmdir" aria-label="Permalink to &quot;4. rmdir&quot;">​</a></h3><p>删除目录，目录必须为空。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rmdir [-p] 目录名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p ：递归删除目录</span></span></code></pre></div><h3 id="_5-touch" tabindex="-1">5. touch <a class="header-anchor" href="#_5-touch" aria-label="Permalink to &quot;5. touch&quot;">​</a></h3><p>更新文件时间或者建立新文件。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># touch [-acdmt] filename</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-a ： 更新 atime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-c ： 更新 ctime，若该文件不存在则不建立新文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-m ： 更新 mtime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date=&quot;日期或时间&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]</span></span></code></pre></div><h3 id="_6-cp" tabindex="-1">6. cp <a class="header-anchor" href="#_6-cp" aria-label="Permalink to &quot;6. cp&quot;">​</a></h3><p>复制文件。如果源文件有两个以上，则目的文件一定要是目录才行。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cp [-adfilprsu] source destination</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-a ：相当于 -dr --preserve=all</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-i ：若目标文件已经存在时，在覆盖前会先询问</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p ：连同文件的属性一起复制过去</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-r ：递归复制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了</span></span></code></pre></div><h3 id="_7-rm" tabindex="-1">7. rm <a class="header-anchor" href="#_7-rm" aria-label="Permalink to &quot;7. rm&quot;">​</a></h3><p>删除文件。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># rm [-fir] 文件或目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-r ：递归删除</span></span></code></pre></div><h3 id="_8-mv" tabindex="-1">8. mv <a class="header-anchor" href="#_8-mv" aria-label="Permalink to &quot;8. mv&quot;">​</a></h3><p>移动文件。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># mv [-fiu] source destination</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># mv [options] source1 source2 source3 .... directory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</span></span></code></pre></div><h2 id="修改权限" tabindex="-1">修改权限 <a class="header-anchor" href="#修改权限" aria-label="Permalink to &quot;修改权限&quot;">​</a></h2><p>可以将一组权限用数字来表示，此时一组权限的 3 个位当做二进制数字的位，从左到右每个位的权值为 4、2、1，即每个权限对应的数字权值为 r : 4、w : 2、x : 1。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># chmod [-R] xyz dirname/filename</span></span></code></pre></div><p>示例：将 .bashrc 文件的权限修改为 -rwxr-xr--。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># chmod 754 .bashrc</span></span></code></pre></div><p>也可以使用符号来设定权限。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># chmod [ugoa]  [+-=] [rwx] dirname/filename</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- u：拥有者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- g：所属群组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- o：其他人</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- a：所有人</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- +：添加权限</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- -：移除权限</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- =：设定权限</span></span></code></pre></div><p>示例：为 .bashrc 文件的所有用户添加写权限。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># chmod a+w .bashrc</span></span></code></pre></div><h2 id="默认权限" tabindex="-1">默认权限 <a class="header-anchor" href="#默认权限" aria-label="Permalink to &quot;默认权限&quot;">​</a></h2><ul><li>文件默认权限：文件默认没有可执行权限，因此为 666，也就是 -rw-rw-rw- 。</li><li>目录默认权限：目录必须要能够进入，也就是必须拥有可执行权限，因此为 777 ，也就是 drwxrwxrwx。</li></ul><p>可以通过 umask 设置或者查看默认权限，通常以掩码的形式来表示，例如 002 表示其它用户的权限去除了一个 2 的权限，也就是写权限，因此建立新文件时默认的权限为 -rw-rw-r--。</p><h2 id="目录的权限" tabindex="-1">目录的权限 <a class="header-anchor" href="#目录的权限" aria-label="Permalink to &quot;目录的权限&quot;">​</a></h2><p>文件名不是存储在一个文件的内容中，而是存储在一个文件所在的目录中。因此，拥有文件的 w 权限并不能对文件名进行修改。</p><p>目录存储文件列表，一个目录的权限也就是对其文件列表的权限。因此，目录的 r 权限表示可以读取文件列表；w 权限表示可以修改文件列表，具体来说，就是添加删除文件，对文件名进行修改；x 权限可以让该目录成为工作目录，x 权限是 r 和 w 权限的基础，如果不能使一个目录成为工作目录，也就没办法读取文件列表以及对文件列表进行修改了。</p><h2 id="链接" tabindex="-1">链接 <a class="header-anchor" href="#链接" aria-label="Permalink to &quot;链接&quot;">​</a></h2><p><img src="`+m+`" alt="avatar | 450"><br></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># ln [-sf] source_filename dist_filename</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-s ：默认是实体链接，加 -s 为符号链接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-f ：如果目标文件存在时，先删除目标文件</span></span></code></pre></div><h3 id="_1-实体链接" tabindex="-1">1. 实体链接 <a class="header-anchor" href="#_1-实体链接" aria-label="Permalink to &quot;1. 实体链接&quot;">​</a></h3><p>在目录下创建一个条目，记录着文件名与 inode 编号，这个 inode 就是源文件的 inode。</p><p>删除任意一个条目，文件还是存在，只要引用数量不为 0。</p><p>有以下限制：不能跨越文件系统、不能对目录进行链接。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># ln /etc/crontab .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># ll -i /etc/crontab crontab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 crontab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab</span></span></code></pre></div><h3 id="_2-符号链接" tabindex="-1">2. 符号链接 <a class="header-anchor" href="#_2-符号链接" aria-label="Permalink to &quot;2. 符号链接&quot;">​</a></h3><p>符号链接文件保存着源文件所在的绝对路径，在读取时会定位到源文件上，可以理解为 Windows 的快捷方式。</p><p>当源文件被删除了，链接文件就打不开了。</p><p>因为记录的是路径，所以可以为目录建立符号链接。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># ll -i /etc/crontab /root/crontab2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">53745909 lrwxrwxrwx. 1 root root 12 Jun 23 22:31 /root/crontab2 -&gt; /etc/crontab</span></span></code></pre></div><h2 id="获取文件内容" tabindex="-1">获取文件内容 <a class="header-anchor" href="#获取文件内容" aria-label="Permalink to &quot;获取文件内容&quot;">​</a></h2><h3 id="_1-cat" tabindex="-1">1. cat <a class="header-anchor" href="#_1-cat" aria-label="Permalink to &quot;1. cat&quot;">​</a></h3><p>取得文件内容。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># cat [-AbEnTv] filename</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-n ：打印出行号，连同空白行也会有行号，-b 不会</span></span></code></pre></div><h3 id="_2-tac" tabindex="-1">2. tac <a class="header-anchor" href="#_2-tac" aria-label="Permalink to &quot;2. tac&quot;">​</a></h3><p>是 cat 的反向操作，从最后一行开始打印。</p><h3 id="_3-more" tabindex="-1">3. more <a class="header-anchor" href="#_3-more" aria-label="Permalink to &quot;3. more&quot;">​</a></h3><p>和 cat 不同的是它可以一页一页查看文件内容，比较适合大文件的查看。</p><h3 id="_4-less" tabindex="-1">4. less <a class="header-anchor" href="#_4-less" aria-label="Permalink to &quot;4. less&quot;">​</a></h3><p>和 more 类似，但是多了一个向前翻页的功能。</p><h3 id="_5-head" tabindex="-1">5. head <a class="header-anchor" href="#_5-head" aria-label="Permalink to &quot;5. head&quot;">​</a></h3><p>取得文件前几行。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># head [-n number] filename</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-n ：后面接数字，代表显示几行的意思</span></span></code></pre></div><h3 id="_6-tail" tabindex="-1">6. tail <a class="header-anchor" href="#_6-tail" aria-label="Permalink to &quot;6. tail&quot;">​</a></h3><p>是 head 的反向操作，只是取得是后几行。</p><h3 id="_7-od" tabindex="-1">7. od <a class="header-anchor" href="#_7-od" aria-label="Permalink to &quot;7. od&quot;">​</a></h3><p>以字符或者十六进制的形式显示二进制文件。</p><h2 id="指令与文件搜索" tabindex="-1">指令与文件搜索 <a class="header-anchor" href="#指令与文件搜索" aria-label="Permalink to &quot;指令与文件搜索&quot;">​</a></h2><h3 id="_1-which" tabindex="-1">1. which <a class="header-anchor" href="#_1-which" aria-label="Permalink to &quot;1. which&quot;">​</a></h3><p>指令搜索。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># which [-a] command</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-a ：将所有指令列出，而不是只列第一个</span></span></code></pre></div><h3 id="_2-whereis" tabindex="-1">2. whereis <a class="header-anchor" href="#_2-whereis" aria-label="Permalink to &quot;2. whereis&quot;">​</a></h3><p>文件搜索。速度比较快，因为它只搜索几个特定的目录。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># whereis [-bmsu] dirname/filename</span></span></code></pre></div><h3 id="_3-locate" tabindex="-1">3. locate <a class="header-anchor" href="#_3-locate" aria-label="Permalink to &quot;3. locate&quot;">​</a></h3><p>文件搜索。可以用关键字或者正则表达式进行搜索。</p><p>locate 使用 /var/lib/mlocate/ 这个数据库来进行搜索，它存储在内存中，并且每天更新一次，所以无法用 locate 搜索新建的文件。可以使用 updatedb 来立即更新数据库。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># locate [-ir] keyword</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-r：正则表达式</span></span></code></pre></div><h3 id="_4-find" tabindex="-1">4. find <a class="header-anchor" href="#_4-find" aria-label="Permalink to &quot;4. find&quot;">​</a></h3><p>文件搜索。可以使用文件的属性和权限进行搜索。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># find [basedir] [option]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example: find . -name &quot;shadow*&quot;</span></span></code></pre></div><p><strong>① 与时间有关的选项</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-mtime  n ：列出在 n 天前的那一天修改过内容的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-mtime +n ：列出在 n 天之前 (不含 n 天本身) 修改过内容的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-mtime -n ：列出在 n 天之内 (含 n 天本身) 修改过内容的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-newer file ： 列出比 file 更新的文件</span></span></code></pre></div><p>+4、4 和 -4 的指示的时间范围如下：</p><p><img src="`+y+`" alt="avatar"><br></p><p><strong>② 与文件拥有者和所属群组有关的选项</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-uid n</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-gid n</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-user name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-group name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-nouser ：搜索拥有者不存在 /etc/passwd 的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-nogroup：搜索所属群组不存在于 /etc/group 的文件</span></span></code></pre></div><p><strong>③ 与文件权限和名称有关的选项</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-name filename</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-size [+-]SIZE：搜寻比 SIZE 还要大 (+) 或小 (-) 的文件。这个 SIZE 的规格有：c: 代表 byte，k: 代表 1024bytes。所以，要找比 50KB 还要大的文件，就是 -size +50k</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-type TYPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-perm mode  ：搜索权限等于 mode 的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-perm -mode ：搜索权限包含 mode 的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-perm /mode ：搜索权限包含任一 mode 的文件</span></span></code></pre></div><h1 id="六、压缩与打包" tabindex="-1">六、压缩与打包 <a class="header-anchor" href="#六、压缩与打包" aria-label="Permalink to &quot;六、压缩与打包&quot;">​</a></h1><h2 id="压缩文件名" tabindex="-1">压缩文件名 <a class="header-anchor" href="#压缩文件名" aria-label="Permalink to &quot;压缩文件名&quot;">​</a></h2><p>Linux 底下有很多压缩文件名，常见的如下：</p><table tabindex="0"><thead><tr><th>扩展名</th><th>压缩程序</th></tr></thead><tbody><tr><td>*.Z</td><td>compress</td></tr><tr><td>*.zip</td><td>zip</td></tr><tr><td>*.gz</td><td>gzip</td></tr><tr><td>*.bz2</td><td>bzip2</td></tr><tr><td>*.xz</td><td>xz</td></tr><tr><td>*.tar</td><td>tar 程序打包的数据，没有经过压缩</td></tr><tr><td>*.tar.gz</td><td>tar 程序打包的文件，经过 gzip 的压缩</td></tr><tr><td>*.tar.bz2</td><td>tar 程序打包的文件，经过 bzip2 的压缩</td></tr><tr><td>*.tar.xz</td><td>tar 程序打包的文件，经过 xz 的压缩</td></tr></tbody></table><h2 id="压缩指令" tabindex="-1">压缩指令 <a class="header-anchor" href="#压缩指令" aria-label="Permalink to &quot;压缩指令&quot;">​</a></h2><h3 id="_1-gzip" tabindex="-1">1. gzip <a class="header-anchor" href="#_1-gzip" aria-label="Permalink to &quot;1. gzip&quot;">​</a></h3><p>gzip 是 Linux 使用最广的压缩指令，可以解开 compress、zip 与 gzip 所压缩的文件。</p><p>经过 gzip 压缩过，源文件就不存在了。</p><p>有 9 个不同的压缩等级可以使用。</p><p>可以使用 zcat、zmore、zless 来读取压缩文件的内容。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ gzip [-cdtv#] filename</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-c ：将压缩的数据输出到屏幕上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d ：解压缩</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-t ：检验压缩文件是否出错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v ：显示压缩比等信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为 6</span></span></code></pre></div><h3 id="_2-bzip2" tabindex="-1">2. bzip2 <a class="header-anchor" href="#_2-bzip2" aria-label="Permalink to &quot;2. bzip2&quot;">​</a></h3><p>提供比 gzip 更高的压缩比。</p><p>查看命令：bzcat、bzmore、bzless、bzgrep。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ bzip2 [-cdkzv#] filename</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-k ：保留源文件</span></span></code></pre></div><h3 id="_3-xz" tabindex="-1">3. xz <a class="header-anchor" href="#_3-xz" aria-label="Permalink to &quot;3. xz&quot;">​</a></h3><p>提供比 bzip2 更佳的压缩比。</p><p>可以看到，gzip、bzip2、xz 的压缩比不断优化。不过要注意的是，压缩比越高，压缩的时间也越长。</p><p>查看命令：xzcat、xzmore、xzless、xzgrep。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ xz [-dtlkc#] filename</span></span></code></pre></div><h2 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-label="Permalink to &quot;打包&quot;">​</a></h2><p>压缩指令只能对一个文件进行压缩，而打包能够将多个文件打包成一个大文件。tar 不仅可以用于打包，也可以使用 gzip、bzip2、xz 将打包文件进行压缩。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ tar [-z|-j|-J] [cv] [-f 新建的 tar 文件] filename...  ==打包压缩</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ tar [-z|-j|-J] [tv] [-f 已有的 tar 文件]              ==查看</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ tar [-z|-j|-J] [xv] [-f 已有的 tar 文件] [-C 目录]    ==解压缩</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-z ：使用 zip；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-j ：使用 bzip2；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-J ：使用 xz；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-c ：新建打包文件；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-t ：查看打包文件里面有哪些文件；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-x ：解打包或解压缩的功能；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v ：在压缩/解压缩的过程中，显示正在处理的文件名；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-f : filename：要处理的文件；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-C 目录 ： 在特定目录解压缩。</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">使用方式</th><th>命令</th></tr></thead><tbody><tr><td style="text-align:center;">打包压缩</td><td>tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称</td></tr><tr><td style="text-align:center;">查 看</td><td>tar -jtv -f filename.tar.bz2</td></tr><tr><td style="text-align:center;">解压缩</td><td>tar -jxv -f filename.tar.bz2 -C 要解压缩的目录</td></tr></tbody></table><h1 id="七、bash" tabindex="-1">七、Bash <a class="header-anchor" href="#七、bash" aria-label="Permalink to &quot;七、Bash&quot;">​</a></h1><p>可以通过 Shell 请求内核提供服务，Bash 正是 Shell 的一种。</p><h2 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h2><ul><li>命令历史：记录使用过的命令</li><li>命令与文件补全：快捷键：tab</li><li>命名别名：例如 ll 是 ls -al 的别名</li><li>shell scripts</li><li>通配符：例如 ls -l /usr/bin/X* 列出 /usr/bin 下面所有以 X 开头的文件</li></ul><h2 id="变量操作" tabindex="-1">变量操作 <a class="header-anchor" href="#变量操作" aria-label="Permalink to &quot;变量操作&quot;">​</a></h2><p>对一个变量赋值直接使用 =。</p><p>对变量取用需要在变量前加上 $ ，也可以用 \${} 的形式；</p><p>输出变量使用 echo 命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x=abc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${x}</span></span></code></pre></div><p>变量内容如果有空格，必须使用双引号或者单引号。</p><ul><li>双引号内的特殊字符可以保留原本特性，例如 x=&quot;lang is $LANG&quot;，则 x 的值为 lang is zh_TW.UTF-8；</li><li>单引号内的特殊字符就是特殊字符本身，例如 x=&#39;lang is $LANG&#39;，则 x 的值为 lang is $LANG。</li></ul><p>可以使用 \`指令\` 或者 $(指令) 的方式将指令的执行结果赋值给变量。例如 version=$(uname -r)，则 version 的值为 4.15.0-22-generic。</p><p>可以使用 export 命令将自定义变量转成环境变量，环境变量可以在子程序中使用，所谓子程序就是由当前 Bash 而产生的子 Bash。</p><p>Bash 的变量可以声明为数组和整数数字。注意数字类型没有浮点数。如果不进行声明，默认是字符串类型。变量的声明使用 declare 命令：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ declare [-aixr] variable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-a ： 定义为数组类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-i ： 定义为整数类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-x ： 定义为环境变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-r ： 定义为 readonly 类型</span></span></code></pre></div><p>使用 [ ] 来对数组进行索引操作：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> array[1]=a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> array[2]=b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${array[1]}</span></span></code></pre></div><h2 id="指令搜索顺序" tabindex="-1">指令搜索顺序 <a class="header-anchor" href="#指令搜索顺序" aria-label="Permalink to &quot;指令搜索顺序&quot;">​</a></h2><ul><li>以绝对或相对路径来执行指令，例如 /bin/ls 或者 ./ls ；</li><li>由别名找到该指令来执行；</li><li>由 Bash 内置的指令来执行；</li><li>按 $PATH 变量指定的搜索路径的顺序找到第一个指令来执行。</li></ul><h2 id="数据流重定向" tabindex="-1">数据流重定向 <a class="header-anchor" href="#数据流重定向" aria-label="Permalink to &quot;数据流重定向&quot;">​</a></h2><p>重定向指的是使用文件代替标准输入、标准输出和标准错误输出。</p><table tabindex="0"><thead><tr><th style="text-align:center;">1</th><th style="text-align:center;">代码</th><th style="text-align:center;">运算符</th></tr></thead><tbody><tr><td style="text-align:center;">标准输入 (stdin)</td><td style="text-align:center;">0</td><td style="text-align:center;">&lt; 或 &lt;&lt;</td></tr><tr><td style="text-align:center;">标准输出 (stdout)</td><td style="text-align:center;">1</td><td style="text-align:center;">&gt; 或 &gt;&gt;</td></tr><tr><td style="text-align:center;">标准错误输出 (stderr)</td><td style="text-align:center;">2</td><td style="text-align:center;">2&gt; 或 2&gt;&gt;</td></tr></tbody></table><p>其中，有一个箭头的表示以覆盖的方式重定向，而有两个箭头的表示以追加的方式重定向。</p><p>可以将不需要的标准输出以及标准错误输出重定向到 /dev/null，相当于扔进垃圾箱。</p><p>如果需要将标准输出以及标准错误输出同时重定向到一个文件，需要将某个输出转换为另一个输出，例如 2&gt;&amp;1 表示将标准错误输出转换为标准输出。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .bashrc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span></span></code></pre></div><h1 id="八、管道指令" tabindex="-1">八、管道指令 <a class="header-anchor" href="#八、管道指令" aria-label="Permalink to &quot;八、管道指令&quot;">​</a></h1><p>管道是将一个命令的标准输出作为另一个命令的标准输入，在数据需要经过多个步骤的处理之后才能得到我们想要的内容时就可以使用管道。</p><p>在命令之间使用 | 分隔各个管道命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -al</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> less</span></span></code></pre></div><h2 id="提取指令" tabindex="-1">提取指令 <a class="header-anchor" href="#提取指令" aria-label="Permalink to &quot;提取指令&quot;">​</a></h2><p>cut 对数据进行切分，取出想要的部分。</p><p>切分过程一行一行地进行。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ cut</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d ：分隔符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-f ：经过 -d 分隔后，使用 -f n 取出第 n 个区间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-c ：以字符为单位取出区间</span></span></code></pre></div><p>示例 1：last 显示登入者的信息，取出用户名。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ last</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root pts/1 192.168.201.101 Sat Feb 7 12:35 still logged in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root pts/1 192.168.201.101 Fri Feb 6 12:13 - 18:46 (06:33)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root pts/1 192.168.201.254 Thu Feb 5 22:37 - 23:53 (01:16)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ last | cut -d &#39; &#39; -f 1</span></span></code></pre></div><p>示例 2：将 export 输出的信息，取出第 12 字符以后的所有字符串。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ export</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">declare -x HISTCONTROL=&quot;ignoredups&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">declare -x HISTSIZE=&quot;1000&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">declare -x HOME=&quot;/home/dmtsai&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">declare -x HOSTNAME=&quot;study.centos.vbird&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.....(其他省略).....</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ export | cut -c 12-</span></span></code></pre></div><h2 id="排序指令" tabindex="-1">排序指令 <a class="header-anchor" href="#排序指令" aria-label="Permalink to &quot;排序指令&quot;">​</a></h2><p><strong>sort</strong> 用于排序。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ sort [-fbMnrtuk] [file or stdin]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-f ：忽略大小写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-b ：忽略最前面的空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-M ：以月份的名字来排序，例如 JAN，DEC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-n ：使用数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-r ：反向排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-u ：相当于 unique，重复的内容只出现一次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-t ：分隔符，默认为 tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-k ：指定排序的区间</span></span></code></pre></div><p>示例：/etc/passwd 文件内容以 : 来分隔，要求以第三列进行排序。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ cat /etc/passwd | sort -t &#39;:&#39; -k 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root:x:0:0:root:/root:/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai:x:1000:1000:dmtsai:/home/dmtsai:/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">alex:x:1001:1002::/home/alex:/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arod:x:1002:1003::/home/arod:/bin/bash</span></span></code></pre></div><p><strong>uniq</strong> 可以将重复的数据只取一个。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ uniq [-ic]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-i ：忽略大小写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-c ：进行计数</span></span></code></pre></div><p>示例：取得每个人的登录总次数</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ last | cut -d &#39; &#39; -f 1 | sort | uniq -c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">6 (unknown</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">47 dmtsai</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">4 reboot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">7 root</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1 wtmp</span></span></code></pre></div><h2 id="双向输出重定向" tabindex="-1">双向输出重定向 <a class="header-anchor" href="#双向输出重定向" aria-label="Permalink to &quot;双向输出重定向&quot;">​</a></h2><p>输出重定向会将输出内容重定向到文件中，而 <strong>tee</strong> 不仅能够完成这个功能，还能保留屏幕上的输出。也就是说，使用 tee 指令，一个输出会同时传送到文件和屏幕上。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ tee [-a] file</span></span></code></pre></div><h2 id="字符转换指令" tabindex="-1">字符转换指令 <a class="header-anchor" href="#字符转换指令" aria-label="Permalink to &quot;字符转换指令&quot;">​</a></h2><p><strong>tr</strong> 用来删除一行中的字符，或者对字符进行替换。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ tr [-ds] SET1 ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d ： 删除行中 SET1 这个字符串</span></span></code></pre></div><p>示例，将 last 输出的信息所有小写转换为大写。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ last | tr &#39;[a-z]&#39; &#39;[A-Z]&#39;</span></span></code></pre></div><p><strong>col</strong> 将 tab 字符转为空格字符。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ col [-xb]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-x ： 将 tab 键转换成对等的空格键</span></span></code></pre></div><p><strong>expand</strong> 将 tab 转换一定数量的空格，默认是 8 个。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ expand [-t] file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-t ：tab 转为空格的数量</span></span></code></pre></div><p><strong>join</strong> 将有相同数据的那一行合并在一起。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ join [-ti12] file1 file2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-t ：分隔符，默认为空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-i ：忽略大小写的差异</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-1 ：第一个文件所用的比较字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-2 ：第二个文件所用的比较字段</span></span></code></pre></div><p><strong>paste</strong> 直接将两行粘贴在一起。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ paste [-d] file1 file2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d ：分隔符，默认为 tab</span></span></code></pre></div><h2 id="分区指令" tabindex="-1">分区指令 <a class="header-anchor" href="#分区指令" aria-label="Permalink to &quot;分区指令&quot;">​</a></h2><p><strong>split</strong> 将一个文件划分成多个文件。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ split [-bl] file PREFIX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-b ：以大小来进行分区，可加单位，例如 b, k, m 等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-l ：以行数来进行分区。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- PREFIX ：分区文件的前导名称</span></span></code></pre></div><h1 id="九、正则表达式" tabindex="-1">九、正则表达式 <a class="header-anchor" href="#九、正则表达式" aria-label="Permalink to &quot;九、正则表达式&quot;">​</a></h1><h2 id="grep" tabindex="-1">grep <a class="header-anchor" href="#grep" aria-label="Permalink to &quot;grep&quot;">​</a></h2><p>g/re/p（globally search a regular expression and print)，使用正则表示式进行全局查找并打印。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ grep [-acinv] [--color=auto] 搜寻字符串 filename</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-c ： 统计匹配到行的个数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-i ： 忽略大小写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-n ： 输出行号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v ： 反向选择，也就是显示出没有 搜寻字符串 内容的那一行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--color=auto ：找到的关键字加颜色显示</span></span></code></pre></div><p>示例：把含有 the 字符串的行提取出来（注意默认会有 --color=auto 选项，因此以下内容在 Linux 中有颜色显示 the 字符串）</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ grep -n &#39;the&#39; regular_express.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">8:I can&#39;t finish the test.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">12:the symbol &#39;*&#39; is represented as start.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">15:You are the best is mean you are the no. 1.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">16:The world Happy is the same with &quot;glad&quot;.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">18:google is the best tools for search keyword</span></span></code></pre></div><p>示例：正则表达式 a{m,n} 用来匹配字符 a m~n 次，这里需要将 { 和 } 进行转义，因为它们在 shell 是有特殊意义的。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ grep -n &#39;a\\{2,5\\}&#39; regular_express.txt</span></span></code></pre></div><h2 id="printf" tabindex="-1">printf <a class="header-anchor" href="#printf" aria-label="Permalink to &quot;printf&quot;">​</a></h2><p>用于格式化输出。它不属于管道命令，在给 printf 传数据时需要使用 $( ) 形式。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ printf &#39;%10s %5i %5i %5i %8.2f \\n&#39; $(cat printf.txt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DmTsai    80    60    92    77.33</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     VBird    75    55    80    70.00</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       Ken    60    90    70    73.33</span></span></code></pre></div><h2 id="awk" tabindex="-1">awk <a class="header-anchor" href="#awk" aria-label="Permalink to &quot;awk&quot;">​</a></h2><p>是由 Alfred Aho，Peter Weinberger 和 Brian Kernighan 创造，awk 这个名字就是这三个创始人名字的首字母。</p><p>awk 每次处理一行，处理的最小单位是字段，每个字段的命名方式为：$n，n 为字段号，从 1 开始，$0 表示一整行。</p><p>示例：取出最近五个登录用户的用户名和 IP。首先用 last -n 5 取出用最近五个登录用户的所有信息，可以看到用户名和 IP 分别在第 1 列和第 3 列，我们用 $1 和 $3 就能取出这两个字段，然后用 print 进行打印。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ last -n 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai pts/0 192.168.1.100 Tue Jul 14 17:32 still logged in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai pts/0 192.168.1.100 Thu Jul 9 23:36 - 02:58 (03:22)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai pts/0 192.168.1.100 Thu Jul 9 17:23 - 23:36 (06:12)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai pts/0 192.168.1.100 Thu Jul 9 08:02 - 08:17 (00:14)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai tty1 Fri May 29 11:55 - 12:11 (00:15)</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ last -n 5 | awk &#39;{print $1 &quot;\\t&quot; $3}&#39;</span></span></code></pre></div><p>可以根据字段的某些条件进行匹配，例如匹配字段小于某个值的那一行数据。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ awk &#39;条件类型 1 {动作 1} 条件类型 2 {动作 2} ...&#39; filename</span></span></code></pre></div><p>示例：/etc/passwd 文件第三个字段为 UID，对 UID 小于 10 的数据进行处理。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ cat /etc/passwd | awk &#39;BEGIN {FS=&quot;:&quot;} $3 </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 10 {print $1 &quot;\\t &quot; $3}&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bin 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">daemon 2</span></span></code></pre></div><p>awk 变量：</p><table tabindex="0"><thead><tr><th style="text-align:center;">变量名称</th><th>代表意义</th></tr></thead><tbody><tr><td style="text-align:center;">NF</td><td>每一行拥有的字段总数</td></tr><tr><td style="text-align:center;">NR</td><td>目前所处理的是第几行数据</td></tr><tr><td style="text-align:center;">FS</td><td>目前的分隔字符，默认是空格键</td></tr></tbody></table><p>示例：显示正在处理的行号以及每一行有多少字段</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ last -n 5 | awk &#39;{print $1 &quot;\\t lines: &quot; NR &quot;\\t columns: &quot; NF}&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai lines: 1 columns: 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai lines: 2 columns: 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai lines: 3 columns: 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai lines: 4 columns: 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dmtsai lines: 5 columns: 9</span></span></code></pre></div><h1 id="进程管理" tabindex="-1">进程管理 <a class="header-anchor" href="#进程管理" aria-label="Permalink to &quot;进程管理&quot;">​</a></h1><p><a href="./process.html">进程管理</a></p><h1 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h1><ul><li>鸟哥. 鸟 哥 的 Linux 私 房 菜 基 础 篇 第 三 版[J]. 2009.</li><li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-rpmdpkg/index.html" target="_blank" rel="noreferrer">Linux 平台上的软件包管理</a></li><li><a href="http://liubigbin.github.io/2016/03/11/Linux-%E4%B9%8B%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E3%80%81%E5%83%B5%E6%AD%BB%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/" target="_blank" rel="noreferrer">Linux 之守护进程、僵死进程与孤儿进程</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html" target="_blank" rel="noreferrer">Linux 守护进程的启动方法</a></li><li><a href="https://stackoverflow.com/questions/185899/what-is-the-difference-between-a-symbolic-link-and-a-hard-link" target="_blank" rel="noreferrer">What is the difference between a symbolic link and a hard link?</a></li><li><a href="https://idea.popcount.org/2012-12-11-linux-process-states/" target="_blank" rel="noreferrer">Linux process states</a></li><li><a href="https://en.wikipedia.org/wiki/GUID_Partition_Table" target="_blank" rel="noreferrer">GUID Partition Table</a></li><li><a href="https://blog.csdn.net/kevinhg/article/details/7001719" target="_blank" rel="noreferrer">详解 wait 和 waitpid 函数</a></li><li><a href="https://blog.csdn.net/tianlesoftware/article/details/6009110" target="_blank" rel="noreferrer">IDE、SATA、SCSI、SAS、FC、SSD 硬盘类型介绍</a></li><li><a href="http://www.mpchunter.com/s3000/akai-ib-301s-scsi-interface-for-s2800s3000/" target="_blank" rel="noreferrer">Akai IB-301S SCSI Interface for S2800,S3000</a></li><li><a href="https://en.wikipedia.org/wiki/Parallel_ATA" target="_blank" rel="noreferrer">Parallel ATA</a></li><li><a href="http://www.thessdreview.com/our-reviews/adata-xpg-sx900-256gb-sata-3-ssd-review-expanded-capacity-and-sandforce-driven-speed/4/" target="_blank" rel="noreferrer">ADATA XPG SX900 256GB SATA 3 SSD Review – Expanded Capacity and SandForce Driven Speed</a></li><li><a href="https://blogs.cisco.com/datacenter/decoding-ucs-invicta-part-1" target="_blank" rel="noreferrer">Decoding UCS Invicta – Part 1</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98" target="_blank" rel="noreferrer">硬盘</a></li><li><a href="http://www.differencebetween.info/difference-between-sas-and-sata" target="_blank" rel="noreferrer">Difference between SAS and SATA</a></li><li><a href="https://zh.wikipedia.org/wiki/BIOS" target="_blank" rel="noreferrer">BIOS</a></li><li><a href="https://www.cs.rutgers.edu/~pxk/416/docs/13-fs-studies.html" target="_blank" rel="noreferrer">File system design case studies</a></li><li><a href="https://classes.soe.ucsc.edu/cmps111/Fall08/proj4.shtml" target="_blank" rel="noreferrer">Programming Project #4</a></li><li><a href="http://web.cs.ucla.edu/classes/fall14/cs111/scribe/11a/index.html" target="_blank" rel="noreferrer">FILE SYSTEM DESIGN</a></li></ul>`,344)])])}const S=s(v,[["render",x]]);export{B as __pageData,S as default};
