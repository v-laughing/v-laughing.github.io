import{_ as i,c as a,o as e,a4 as t}from"./chunks/framework.DdddRsJj.js";const p="/assets/4-1.CKxbP0h0.png",n="/assets/4-2.DKhcoAUH.png",l="/assets/4-3.B7s3GvRS.png",y=JSON.parse('{"title":"(四)表达式","description":"","frontmatter":{"title":"(四)表达式"},"headers":[],"relativePath":"cs/cpp/expr.md","filePath":"cs/cpp/expr.md"}'),h={name:"cs/cpp/expr.md"};function o(r,s,d,c,k,E){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h2 id="基础-fundamentals" tabindex="-1">基础（Fundamentals） <a class="header-anchor" href="#基础-fundamentals" aria-label="Permalink to &quot;基础（Fundamentals）&quot;">​</a></h2><p>表达式由一个或多个运算对象组成，对表达式求值将得到一个结果。字面值和变量是最简单的表达式，其结果就是字面值和变量的值。</p><h3 id="基础概念-basic-concepts" tabindex="-1">基础概念（Basic Concepts） <a class="header-anchor" href="#基础概念-basic-concepts" aria-label="Permalink to &quot;基础概念（Basic Concepts）&quot;">​</a></h3><p>cpp定义了一元运算符（unary operator）和二元运算符（binary operator）。除此之外，还有一个作用于三个运算对象的三元运算符。函数调用也是一种特殊的运算符，它对运算对象的数量没有限制。</p><p>表达式求值过程中，小整数类型（如<code>bool</code>、<code>char</code>、<code>short</code>等）通常会被提升（promoted）为较大的整数类型，主要是<code>int</code>。</p><p>cpp定义了运算符作用于<mark>内置类型</mark>和<mark>复合类型</mark>的运算对象时所执行的操作。当运算符作用于<mark>类类型</mark>的运算对象时，用户可以自定义其含义，这被称作<strong>运算符重载</strong>（overloaded operator）。</p><p>cpp的表达式分为<strong>右值</strong>（rvalue）和<strong>左值</strong>（lvalue）。当一个对象被用作右值的时候，用的是对象的值；当对象被用作左值时，用的是对象的地址。需要右值的地方可以用左值代替，反之则不行。</p><ul><li><p>赋值运算符需要一个非常量左值作为其左侧运算对象，返回结果也是一个左值。</p></li><li><p>取地址符作用于左值运算对象，返回指向该运算对象的指针，该指针是一个右值。</p></li><li><p>内置解引用运算符、下标运算符、迭代器解引用运算符、<code>string</code>和<code>vector</code>的下标运算符都返回左值。</p></li><li><p>内置类型和迭代器的递增递减运算符作用于左值运算对象。前置版本返回左值，后置版本返回右值。</p></li></ul><p>如果<code>decltype</code>作用于一个求值结果是左值的表达式，会得到<mark>引用类型</mark>。</p><h3 id="优先级与结合律-precedence-and-associativity" tabindex="-1">优先级与结合律（Precedence and Associativity） <a class="header-anchor" href="#优先级与结合律-precedence-and-associativity" aria-label="Permalink to &quot;优先级与结合律（Precedence and Associativity）&quot;">​</a></h3><p>复合表达式（compound expression）指含有两个或多个运算符的表达式。优先级与结合律决定了运算对象的组合方式。</p><p>括号无视优先级与结合律，表达式中括号括起来的部分被当成一个单元来求值，然后再与其他部分一起按照优先级组合。</p><h3 id="求值顺序-order-of-evaluation" tabindex="-1">求值顺序（Order of Evaluation） <a class="header-anchor" href="#求值顺序-order-of-evaluation" aria-label="Permalink to &quot;求值顺序（Order of Evaluation）&quot;">​</a></h3><p>对于那些没有指定执行顺序的运算符来说，如果表达式指向并修改了同一个对象，将会引发错误并产生<mark>未定义的行为</mark>。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // undefined</span></span></code></pre></div><p>处理复合表达式时建议遵循以下两点：</p><ul><li><p>不确定求值顺序时，使用括号。</p></li><li><p>如果表达式改变了某个运算对象的值，则在表达式的其他位置不要再使用这个运算对象。</p></li></ul><p>当改变运算对象的子表达式本身就是另一个子表达式的运算对象时，第二条规则无效。如<code>*++iter</code>，递增运算符改变了<code>iter</code>的值，而改变后的<code>iter</code>又是解引用运算符的运算对象。类似情况下，求值的顺序不会成为问题。</p><h2 id="算术运算符-arithmetic-operators" tabindex="-1">算术运算符（Arithmetic Operators） <a class="header-anchor" href="#算术运算符-arithmetic-operators" aria-label="Permalink to &quot;算术运算符（Arithmetic Operators）&quot;">​</a></h2><p>算术运算符（左结合律）：</p><p><img src="`+p+'" alt="4-1"></p><p>在除法运算中，cpp语言的早期版本允许结果为负数的商向上或向下取整，cpp11新标准则规定商一律向0取整（即直接去除小数部分）。</p><h2 id="逻辑和关系运算符-logical-and-relational-operators" tabindex="-1">逻辑和关系运算符（Logical and Relational Operators） <a class="header-anchor" href="#逻辑和关系运算符-logical-and-relational-operators" aria-label="Permalink to &quot;逻辑和关系运算符（Logical and Relational Operators）&quot;">​</a></h2><p>关系运算符作用于算术类型和指针类型，逻辑运算符作用于任意能转换成布尔值的类型。逻辑运算符和关系运算符的返回值都是布尔类型。</p><p><img src="'+n+`" alt="4-2"></p><p>运算符<code>&amp;&amp;</code>和<code>||</code>的计算遵循「短路求值」策略：</p><ul><li><p>对于<code>&amp;&amp;</code>，当且仅当左侧运算对象为真时才对右侧运算对象求值。</p></li><li><p>对于<code>||</code>，当且仅当左侧运算对象为假时才对右侧运算对象求值。</p></li></ul><p>进行比较运算时，除非比较的对象是布尔类型，否则不要使用布尔字面值<code>true</code>和<code>false</code>作为运算对象。</p><h2 id="赋值运算符-assignment-operators" tabindex="-1">赋值运算符（Assignment Operators） <a class="header-anchor" href="#赋值运算符-assignment-operators" aria-label="Permalink to &quot;赋值运算符（Assignment Operators）&quot;">​</a></h2><p>赋值运算符的返回结果是一个左值，满足右结合律。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ival, jval;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ival </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ok: each assigned 0</span></span></code></pre></div><blockquote><p>赋值运算符的优先级低于关系运算符的优先级。在条件语句中，赋值部分通常应该加上括号。</p></blockquote><p>复合赋值运算符包括<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&amp;=</code>、<code>^=</code>和<code>|=</code>。任意一种复合运算都完全等价于<em>a = a op b</em>。</p><h2 id="递增和递减运算符-increment-and-decrement-operators" tabindex="-1">递增和递减运算符（Increment and Decrement Operators） <a class="header-anchor" href="#递增和递减运算符-increment-and-decrement-operators" aria-label="Permalink to &quot;递增和递减运算符（Increment and Decrement Operators）&quot;">​</a></h2><p>递增和递减运算符是为对象加1或减1的简洁书写形式。很多不支持算术运算的迭代器可以使用递增和递减运算符。</p><p>递增和递减运算符分为前置版本和后置版本，两者都先使运算对象加1（或减1）。</p><ul><li><p>前置版本将改变后的对象作为求值结果。</p></li><li><p>后置版本将改变前的对象作为求值结果（一个副本）。</p></li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, j;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // j = 1, i = 1: prefix yields the incremented value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // j = 1, i = 2: postfix yields the unincremented value</span></span></code></pre></div><blockquote><p>一般的，优先使用前置版本。</p></blockquote><p>在某些语句中混用解引用和递增运算符可以使程序更简洁。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span></code></pre></div><h2 id="成员访问运算符-the-member-access-operators" tabindex="-1">成员访问运算符（The Member Access Operators） <a class="header-anchor" href="#成员访问运算符-the-member-access-operators" aria-label="Permalink to &quot;成员访问运算符（The Member Access Operators）&quot;">​</a></h2><p>点运算符<code>.</code>和箭头运算符<code>-&gt;</code>都可以用来访问成员，表达式<code>ptr-&gt;mem</code>等价于<code>(*ptr).mem</code>。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // run the size member of the string s1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // run size on the object to which p points</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // equivalent to (*p).size()</span></span></code></pre></div><h2 id="条件运算符-the-conditional-operator" tabindex="-1">条件运算符（The Conditional Operator） <a class="header-anchor" href="#条件运算符-the-conditional-operator" aria-label="Permalink to &quot;条件运算符（The Conditional Operator）&quot;">​</a></h2><p>条件运算符的使用形式如下：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cond </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expr2;</span></span></code></pre></div><p>只有当条件运算符的两个表达式都是左值或者能转换成同一种左值类型时，运算的结果才是左值，否则运算的结果就是右值。</p><h2 id="位运算符-the-bitwise-operators" tabindex="-1">位运算符（The Bitwise Operators） <a class="header-anchor" href="#位运算符-the-bitwise-operators" aria-label="Permalink to &quot;位运算符（The Bitwise Operators）&quot;">​</a></h2><p>位运算符（左结合律）：</p><p><img src="`+l+`" alt="4-3"></p><p>在位运算中符号位如何处理并没有明确的规定，所以建议仅将位运算符用于无符号类型的处理。</p><p>左移运算符<code>&lt;&lt;</code>在运算对象右侧插入值为0的二进制位。右移运算符<code>&gt;&gt;</code>的行为依赖于其左侧运算对象的类型：如果该运算对象是无符号类型，在其左侧插入值为0的二进制位；如果是带符号类型，在其左侧插入符号位的副本或者值为0的二进制位，如何选择视具体环境而定。</p><h2 id="sizeof运算符-the-sizeof-operator" tabindex="-1">sizeof运算符（The sizeof Operator） <a class="header-anchor" href="#sizeof运算符-the-sizeof-operator" aria-label="Permalink to &quot;sizeof运算符（The sizeof Operator）&quot;">​</a></h2><p><code>sizeof</code>运算符返回一个表达式或一个类型名字所占的字节数，返回值是<code>size_t</code>类型。</p><p>在<code>sizeof</code>的运算对象中解引用一个无效指针仍然是一种安全的行为，因为指针实际上并没有被真正使用。</p><p><code>sizeof</code>运算符的结果部分依赖于其作用的类型：</p><ul><li><p>对<code>char</code>或者类型为<code>char</code>的表达式执行<code>sizeof</code>运算，返回值为1。</p></li><li><p>对引用类型执行<code>sizeof</code>运算得到被引用对象所占空间的大小。</p></li><li><p>对指针执行<code>sizeof</code>运算得到指针本身所占空间的大小。</p></li><li><p>对解引用指针执行<code>sizeof</code>运算得到指针指向的对象所占空间的大小，指针不需要有效。</p></li><li><p>对数组执行<code>sizeof</code>运算得到整个数组所占空间的大小。</p></li><li><p>对<code>string</code>或<code>vector</code>对象执行<code>sizeof</code>运算<mark>只返回该类型固定部分的大小</mark>，不会计算对象中元素所占空间的大小。</p></li></ul><h2 id="逗号运算符-comma-operator" tabindex="-1">逗号运算符（Comma Operator） <a class="header-anchor" href="#逗号运算符-comma-operator" aria-label="Permalink to &quot;逗号运算符（Comma Operator）&quot;">​</a></h2><p>逗号运算符<code>,</code>含有两个运算对象，按照从左向右的顺序依次求值，最后<mark>返回右侧表达式的值</mark>。逗号运算符经常用在<code>for</code>循环中。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::size_type cnt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ivec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// assign values from size... 1 to the elements in ivec</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::size_type ix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; ix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ivec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ix, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cnt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ivec[ix] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cnt;</span></span></code></pre></div><h2 id="类型转换-type-conversions" tabindex="-1">类型转换（Type Conversions） <a class="header-anchor" href="#类型转换-type-conversions" aria-label="Permalink to &quot;类型转换（Type Conversions）&quot;">​</a></h2><p>无须程序员介入，会自动执行的类型转换叫做<strong>隐式转换</strong>（implicit conversions）。</p><h3 id="算术转换-integral-promotions" tabindex="-1">算术转换（Integral Promotions） <a class="header-anchor" href="#算术转换-integral-promotions" aria-label="Permalink to &quot;算术转换（Integral Promotions）&quot;">​</a></h3><p>把一种算术类型转换成另一种算术类型叫做算术转换。</p><p>整型提升（integral promotions）负责把小整数类型转换成较大的整数类型。</p><h3 id="其他隐式类型转换-other-implicit-conversions" tabindex="-1">其他隐式类型转换（Other Implicit Conversions） <a class="header-anchor" href="#其他隐式类型转换-other-implicit-conversions" aria-label="Permalink to &quot;其他隐式类型转换（Other Implicit Conversions）&quot;">​</a></h3><ul><li><p>在大多数表达式中，数组名字自动转换成指向数组首元素的指针。</p></li><li><p>常量整数值0或字面值<code>nullptr</code>能转换成任意指针类型；指向任意非常量的指针能转换成<code>void*</code>；指向任意对象的指针能转换成<code>const void*</code>。</p></li><li><p>任意一种算术类型或指针类型都能转换成布尔类型。如果指针或算术类型的值为0，转换结果是<code>false</code>，否则是<code>true</code>。</p></li><li><p>指向非常量类型的指针能转换成指向相应的常量类型的指针。</p></li></ul><h3 id="显式转换-explicit-conversions" tabindex="-1">显式转换（Explicit Conversions） <a class="header-anchor" href="#显式转换-explicit-conversions" aria-label="Permalink to &quot;显式转换（Explicit Conversions）&quot;">​</a></h3><p>显式类型转换也叫做强制类型转换（cast）。</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>虽然有时不得不使用强制类型转换，但这种方法本质上是非常危险的。建议尽量避免强制类型转换。</p></div><p>命名的强制类型转换（named cast）形式如下：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(expression);</span></span></code></pre></div><p>其中<code>type</code>是转换的目标类型，<code>expression</code>是要转换的值。如果<code>type</code>是引用类型，则转换结果是左值。</p><p><code>cast-name</code>是<code>static_cast</code>、<code>dynamic_cast</code>、<code>const_cast</code>和<code>reinterpret_cast</code>中的一种，用来指定转换的方式。</p><ul><li><p><code>dynamic_cast</code>支持运行时类型识别。</p></li><li><p>任何具有明确定义的类型转换，只要不包含底层<code>const</code>，都能使用<code>static_cast</code>。</p></li><li><p><code>const_cast</code>只能改变运算对象的底层<code>const</code>，不能改变表达式的类型。同时也只有<code>const_cast</code>能改变表达式的常量属性。<code>const_cast</code>常常用于函数重载。</p></li><li><p><code>reinterpret_cast</code>通常为运算对象的位模式提供底层上的重新解释。</p></li></ul><p>早期版本的cpp语言中，显式类型转换包含两种形式：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (expression);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // function-style cast notation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type) expression;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // C-language-style cast notation</span></span></code></pre></div>`,78)])])}const u=i(h,[["render",o]]);export{y as __pageData,u as default};
