import{_ as s,c as a,o as t,a4 as e}from"./chunks/framework.DdddRsJj.js";const l="/assets/ProcessRelated.BlKx7vgl.png",n="/assets/fork.iquGT6Md.png",p="data:image/png;base64,",r="/assets/flow.DAy2v7Q4.png",y=JSON.parse('{"title":"进程关系","description":"","frontmatter":{},"headers":[],"relativePath":"cs/linux/process.md","filePath":"cs/linux/process.md"}'),h={name:"cs/linux/process.md"};function o(d,i,k,c,g,u){return t(),a("div",null,[...i[0]||(i[0]=[e('<h1 id="进程关系" tabindex="-1">进程关系 <a class="header-anchor" href="#进程关系" aria-label="Permalink to &quot;进程关系&quot;">​</a></h1><h2 id="进程组、会话、控制终端" tabindex="-1">进程组、会话、控制终端 <a class="header-anchor" href="#进程组、会话、控制终端" aria-label="Permalink to &quot;进程组、会话、控制终端&quot;">​</a></h2><h3 id="进程组" tabindex="-1">进程组 <a class="header-anchor" href="#进程组" aria-label="Permalink to &quot;进程组&quot;">​</a></h3><p>每个进程都有一个进程ID。每个进程都属于一个进程组。进程组是一个进程或多个进程的集合。进程组ID等于组长进程ID，然而<mark>组长进程不一定会一直存在</mark>。</p><p>进程组的生命周期是从进程组创建开始，一直到最后一个组员离开。组员离开进程组的方式有两种：一是组员结束死亡，二是组员脱离进程组，加入到它人的进程组。</p><p>一个进程只能为自己或者它的子进程设置进程组ID。</p><h3 id="会话" tabindex="-1">会话 <a class="header-anchor" href="#会话" aria-label="Permalink to &quot;会话&quot;">​</a></h3><p>会话是进程组的集合，通常由一个控制终端和一个会话领导进程组成。如果会话中有一个控制终端，它就具有单个前台进程组。除了该控制终端，会话中的所有其他进程组都是后台进程组。</p><p><img src="'+l+`" alt="image"></p><p><strong>创建</strong> 进程可以下面的接口来主动创建一个新会话。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#include &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pid_t setsid (void); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><p>调用该函数的进程不能是一个进程组的组长，否则会失败。</p><p>如果不是进程组组长，则该调用会创建一个新会话，并且调用进程称为<mark>会话leader</mark>。同时该调用会成为一个创建一个新进程组，并成为该新进程组的<mark>组长</mark>，最后该进程的会失去终端。</p><h3 id="控制终端" tabindex="-1">控制终端 <a class="header-anchor" href="#控制终端" aria-label="Permalink to &quot;控制终端&quot;">​</a></h3><p>一个会话最多只有一个控制终端，也允许没有终端。对终端的一些操作而引发的信号会发送到前台进程。</p><h1 id="进程管理" tabindex="-1">进程管理 <a class="header-anchor" href="#进程管理" aria-label="Permalink to &quot;进程管理&quot;">​</a></h1><p>[[common-command#进程|相关命令]]</p><h2 id="创建进程" tabindex="-1">创建进程 <a class="header-anchor" href="#创建进程" aria-label="Permalink to &quot;创建进程&quot;">​</a></h2><p>在类Unix系统中，所有的其他进程都是从进程0 <code>fork</code> 出来。每个进程都会拥有多个子进程。</p><p>创建一个新进程的过程如下：</p><ul><li>分配唯一的进程标识号，并申请PCB(PCB是有限的)。若PCB申请失败则创建失败。</li><li>为进程分配资源（程序和数据、内存空间）。如果资源不足，进程处于“阻塞状态”。</li><li>初始化PCB的各种状态。</li><li>如果就绪队列能够接纳新进程，就将新进程插入到就绪队列，等待被调度运行。</li></ul><h3 id="父进程与子进程" tabindex="-1">父进程与子进程 <a class="header-anchor" href="#父进程与子进程" aria-label="Permalink to &quot;父进程与子进程&quot;">​</a></h3><p>调用fork会创建一个当前进程的精确副本进程，称作<strong>子进程</strong>。调用fork的进程则称为<strong>父进程</strong>。</p><blockquote><p>fork函数有三个返回值</p><ul><li>该进程为父进程时，返回子进程的pid</li><li>该进程为子进程时，返回0</li><li>fork执行失败，返回-1</li></ul></blockquote><p>fork之后两个进程分开执行，像叉子一样。具体哪个先执行看具体系统。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+n+'" alt="image"></p><p><strong>数据关系</strong></p><ul><li>子进程拥有一个自己的进程标识符pid。</li><li>子进程完全复制父进程的栈空间及页表，但没有复制物理页面。这时虚拟地址相同，物理地址也相同。</li><li>父子共享的页面被标记为“只读”。当其中任何一个进程对共享的页面执行“写操作”，此时内核会复制一个物理页面给这个进程使用，同时修改页表。而把原来的只读页面标记为“可写”，留给另外一个进程使用。此过程为<strong>写时复制</strong>。</li></ul><h2 id="杀死进程" tabindex="-1">杀死进程 <a class="header-anchor" href="#杀死进程" aria-label="Permalink to &quot;杀死进程&quot;">​</a></h2><p>每个进程在结束自己之前会调用<code>exit()</code>命令，释放资源。但<strong>进程描述符PCB</strong>（包括进程号，运行时间，退出状态等）被保留下来，以便让父进程获取其终止状态（知道他是如何死的）。</p><p>父进程通过<code>wait()或waitpid()</code>系统调用来获取子进程的终止状态。</p><p>父进程先于子进程结束，子进程成为<strong>孤儿进程</strong>。</p><blockquote><p>一个进程结束时，系统都会自动扫描一下这个进程的子进程，如果这个进程有子进程，被称作孤儿进程，便会将其转交给<code>init</code>进程接管。</p></blockquote><p>子进程终止，父进程尚未回收，子进程成为<strong>僵尸进程</strong>。</p><blockquote><p>父进程没有调用<code>waitpid()</code>时，子进程的进程号等信息不会释放，形成所谓的僵尸进程。<code>进程号是有限的</code>，会导致系统不能产生新的进程。</p></blockquote><h3 id="kill操作" tabindex="-1">kill操作 <a class="header-anchor" href="#kill操作" aria-label="Permalink to &quot;kill操作&quot;">​</a></h3><p><strong>kill -15</strong>：程序接到信号之后，尝试退出。退出前会先进行资源释放、临时文件清理等操作，在此期间遇到问题，如阻塞，程序可忽略kill信号。 <strong>kill -9</strong>：程序强制退出，不能忽略信号。可能导致<mark>数据丢失</mark>或者终端无法恢复到正常状态。</p><h2 id="进程状态" tabindex="-1">进程状态 <a class="header-anchor" href="#进程状态" aria-label="Permalink to &quot;进程状态&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">状态</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">R</td><td>running or runnable (on run queue)<br>正在执行或者可执行，此时进程位于执行队列中。</td></tr><tr><td style="text-align:center;">D</td><td>uninterruptible sleep (usually I/O)<br>不可中断阻塞，通常为 IO 阻塞。</td></tr><tr><td style="text-align:center;">S</td><td>interruptible sleep (waiting for an event to complete) <br> 可中断阻塞，此时进程正在等待某个事件完成。</td></tr><tr><td style="text-align:center;">Z</td><td>zombie (terminated but not reaped by its parent)<br>僵死，进程已经终止但是尚未被其父进程获取信息。</td></tr><tr><td style="text-align:center;">T</td><td>stopped (either by a job control signal or because it is being traced) <br> 结束，进程既可以被作业控制信号结束，也可能是正在被追踪。</td></tr><tr><td style="text-align:center;"><br></td><td></td></tr></tbody></table><p><img src="'+p+'" alt="avatar | 490"><br></p><h2 id="守护进程" tabindex="-1">守护进程 <a class="header-anchor" href="#守护进程" aria-label="Permalink to &quot;守护进程&quot;">​</a></h2><p>运行在后台的一种特殊进程，<mark>独立于控制终端</mark>并且周期性地执行某种任务或等待处理某些发生的事件。</p><p>守护进程一般在系统启动时开始运行，除非强行终止，否则直到系统关机都保持运行。</p><p>一个守护进程的父进程是init进程，因为它真正的父进程在fork出子进程后就先于子进程exit退出了，所以它是一个由init继承的孤儿进程。</p><h3 id="前台任务与后台任务" tabindex="-1">前台任务与后台任务 <a class="header-anchor" href="#前台任务与后台任务" aria-label="Permalink to &quot;前台任务与后台任务&quot;">​</a></h3><p>当终端关闭时，任务被终止。</p><p><strong>前台任务</strong>：独占命令行窗口，只有运行完了或者手动中止，才能执行其他命令。 <strong>后台任务</strong>：在前台任务的基础上，不能再向该任务输入指令。其输出仍会同步地在命令行下。</p><h3 id="sighup信号" tabindex="-1">SIGHUP信号 <a class="header-anchor" href="#sighup信号" aria-label="Permalink to &quot;SIGHUP信号&quot;">​</a></h3><p>用户退出 session 以后，即关调终端。Linux的处理流程：</p><ul><li>用户准备退出 session</li><li>系统向该 session 发出SIGHUP信号</li><li>session 将SIGHUP信号发给所有子进程</li><li>子进程收到SIGHUP信号后，自动退出</li></ul><h3 id="nohup-命令" tabindex="-1">nohup 命令 <a class="header-anchor" href="#nohup-命令" aria-label="Permalink to &quot;nohup 命令&quot;">​</a></h3><p><mark>使后台程序为守护进程</mark>。它做了三件事：</p><ul><li>阻止SIGHUP信号发到这个进程。</li><li>关闭标准输入。该进程不再能够接收任何输入，即使运行在前台。</li><li>重定向标准输出和标准错误到文件nohup.out。</li></ul><h2 id="相关调用" tabindex="-1">相关调用 <a class="header-anchor" href="#相关调用" aria-label="Permalink to &quot;相关调用&quot;">​</a></h2><p><strong>SIGCHLD</strong></p><p>当一个子进程改变了它的状态时（停止运行，继续运行或者退出），有两件事会发生在父进程中：</p><ul><li>得到 SIGCHLD 信号；</li><li>waitpid() 或者 wait() 调用会返回。</li></ul><p>其中子进程发送的 SIGCHLD 信号包含了子进程的信息，比如进程 ID、进程状态、进程使用 CPU 的时间等。</p><p><img src="'+r+'" alt="image"></p><p><strong>wait()</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>父进程调用 wait() 会一直阻塞，直到收到一个子进程退出的 SIGCHLD 信号，之后 wait() 函数会销毁子进程并返回。</p><p>如果成功，返回被收集的子进程的进程 ID；如果调用进程没有子进程，调用就会失败，此时返回 -1，同时 errno 被置为 ECHILD。</p><p>参数 status 用来保存被收集的子进程退出时的一些状态，如果对这个子进程是如何死掉的毫不在意，只想把这个子进程消灭掉，可以设置这个参数为 NULL。</p><p><strong>waitpid()</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> waitpid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>作用和 wait() 完全相同，但是多了两个可由用户控制的参数 pid 和 options。</p><p>pid 参数指示一个子进程的 ID，表示只关心这个子进程退出的 SIGCHLD 信号。如果 pid=-1 时，那么和 wait() 作用相同，都是关心所有子进程退出的 SIGCHLD 信号。</p><p>options 参数主要有 WNOHANG 和 WUNTRACED 两个选项，WNOHANG 可以使 waitpid() 调用变成非阻塞的，也就是说它会立即返回，父进程可以继续执行其它任务。</p>',70)])])}const E=s(h,[["render",o]]);export{y as __pageData,E as default};
