import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.CBsUJNCA.js";const n="/assets/web-page-timing.7RvuCa6Q.png",t="/assets/web-page-lcp.CytvtvW2.png",l="/assets/web-page-fid.ple1PyDD.svg",F=JSON.parse('{"title":"性能","description":"","frontmatter":{"title":"性能"},"headers":[],"relativePath":"cs/web/performance.md","filePath":"cs/web/performance.md"}'),h={name:"cs/web/performance.md"},p=e('<p>页面加载节点图：</p><p><img src="'+n+'" alt="timing"></p><p>一些节点解释：</p><ul><li><strong>domInteractive</strong>：浏览器已完成对 HTML 的解析并且 DOM 树构建完成。</li><li><strong>domContentLoaded</strong>: <code>domInteractive</code>之后，浏览器会触发<code>DOMContentLoaded</code>事件。</li><li><strong>domComplete</strong>：页面的所有处理都已完成，所有资源都已完成下载。此时加载旋转器停止旋转。</li><li><strong>loadEvent</strong>：<code>domComplete</code>之后，浏览器会触发<code>onload</code>事件。</li></ul><h2 id="性能监控" tabindex="-1">性能监控 <a class="header-anchor" href="#性能监控" aria-label="Permalink to &quot;性能监控&quot;">​</a></h2><p>对网页前端性能进行实时监测、分析和优化，为了提高用户体验，减少加载时间，提高页面响应速度和性能。</p><p>主要包括以下几个方面：</p><ul><li><p>页面加载时间：包括DNS解析、TCP连接、请求响应，以及页面完全加载所需的时间。</p></li><li><p>资源加载性能：各个资源文件（如CSS、JavaScript、图片等）的加载时间和大小。可以通过优化资源加载顺序、合并文件、压缩文件大小等方式，提高资源加载性能。</p></li><li><p>页面渲染性能：包括DOM树构建、CSSOM树构建、渲染树构建阶段的耗时。可以通过减少DOM操作、优化CSS选择器、避免强制同步布局等方式，提高页面渲染性能。</p></li><li><p>用户交互性能：用户与页面的交互操作的响应时间，包括点击按钮、输入框输入等操作的反馈速度。可以通过优化JavaScript代码、减少页面重绘等方式，提高用户交互性能。</p></li></ul><p>前端性能监控的实现在于通过指标量化上述的表现并上报数据，从这些数据中分析出页面可能存在的问题。</p><p>上面所述的可以大致分为两种类型：以用户为中心的性能指标与以技术为中心的性能指标。</p><h3 id="以用户为中心的性能指标" tabindex="-1">以用户为中心的性能指标 <a class="header-anchor" href="#以用户为中心的性能指标" aria-label="Permalink to &quot;以用户为中心的性能指标&quot;">​</a></h3><p>可以理解为直接体现出用户的使用体验的指标；对于用户体验来说，指标以下几个方面。</p><ul><li>加载速度：衡量用户是否可以尽早感受到页面已经加载完成。</li><li>视觉稳定：衡量页面上的视觉变化对用户造成的负面影响大小。</li><li>交互延迟：衡量用户是否可以尽早感受到页面已经可以操作。</li></ul><p>目前 Google 定义了LCP、CLS 、FID等指标来衡量上述页面性能，已经成为了目前业界的标准；</p><h4 id="largest-contentful-paint" tabindex="-1">Largest Contentful Paint <a class="header-anchor" href="#largest-contentful-paint" aria-label="Permalink to &quot;Largest Contentful Paint&quot;">​</a></h4><p>最大内容绘制，从页面加载到<strong>可视区域内</strong>最大的图像或文本块完成渲染的时间。衡量页面的<strong>加载速度</strong>。</p><blockquote><p>由于图片字体资源需要异步加载之后才进行渲染以及js代码会修改DOM结构等原因，最大渲染元素的确定需要在首屏渲染完成后。 该值应控制在2.5s下</p></blockquote><p><img src="'+t+'" alt="timing"></p><h4 id="cumulative-layout-shift" tabindex="-1">Cumulative Layout Shift <a class="header-anchor" href="#cumulative-layout-shift" aria-label="Permalink to &quot;Cumulative Layout Shift&quot;">​</a></h4><p>累积布局偏移，测量整个页面生命周期内发生的所有意外布局偏移中<strong>最大一连串</strong>的布局偏移分数。衡量页面视觉稳定性。</p><blockquote><p>该值应控制在0.1下。</p></blockquote><p>一般地，可以通过下面方法降低CLS：</p><ul><li>用<code>transform</code>调整元素的位置和大小。</li><li>在图像和视频元素上包含尺寸属性，或者通过CSS预留所需的空间。</li><li>一般情况下，不要在现有内容的上方插入内容。</li></ul><h4 id="first-input-delay" tabindex="-1">First Input Delay <a class="header-anchor" href="#first-input-delay" aria-label="Permalink to &quot;First Input Delay&quot;">​</a></h4><p>首次输入延迟，从用户第一次与页面交互（单击链接、点击按钮或使用由 JavaScript 驱动的自定义控件）到浏览器作出响应，并实际开始处理事件所经过的时间。衡量页面的交互延迟。</p><blockquote><p>该值应控制在100ms下。 当页面绘制完成，用户进行操作时，主线程恰好繁忙，此时该值就会较大。一种常见情况是页面通过异步加载了大型的JS文件，且在dom解析后执行，如<code>&lt;script defer&gt;</code></p></blockquote><h4 id="其他指标" tabindex="-1">其他指标 <a class="header-anchor" href="#其他指标" aria-label="Permalink to &quot;其他指标&quot;">​</a></h4><ul><li><p>白屏时间：从页面加载（<code>fetchStart</code>）到页面的首个像素完成渲染所需的时间，其中后者不包含默认的页面背景色。</p></li><li><p>灰屏时间，首次内容绘制，从页面加载到页面的任何部分完成渲染的时间。该值应控制在1.8s下。</p></li><li><p>可交互时间（Time to Interactive）：从页面加载到浏览器主线程执行完最后一个长任务的时间。衡量页面能够快速、可靠地响应用户的时间快慢。</p></li></ul><p><img src="'+l+`" alt="timing"></p><h2 id="错误捕捉" tabindex="-1">错误捕捉 <a class="header-anchor" href="#错误捕捉" aria-label="Permalink to &quot;错误捕捉&quot;">​</a></h2><h3 id="js运行时错误" tabindex="-1">js运行时错误 <a class="header-anchor" href="#js运行时错误" aria-label="Permalink to &quot;js运行时错误&quot;">​</a></h3><p><code>window.onerror</code> 和 <code>window.addEventListener(&#39;error&#39;)</code> 都能捕获 <code>js</code> <strong>运行时错误</strong>，但是前者含有详细的堆栈信息，存在error.stack中。两者不会捕捉语法错误。</p><blockquote><p>浏览器遇到语法或运行时错误时，将报告错误并中断当前脚本执行，但不中断其他脚本执行。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// message：错误信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// source：发生错误的脚本URL</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// row：发生错误的行号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// col：发生错误的列号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// error：Error对象 (stack, message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onerror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">col</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 一般上报 message和error.stack</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 对于第三方脚本可不上报，通过source判断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 阻止异常继续向上抛出，否则控制台会显示 Uncaught Error: xxxxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> notdefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// no </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(notdefined); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// yes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// yes</span></span></code></pre></div><h4 id="跨域问题" tabindex="-1">跨域问题 <a class="header-anchor" href="#跨域问题" aria-label="Permalink to &quot;跨域问题&quot;">​</a></h4><p>当加载自不同域的脚本中发生<strong>语法错误</strong>时，为避免信息泄露，语法错误的细节将不会报告，而是简单得报告<code>Script error.</code>（<code>message</code>为此值，<code>error</code>为空对象, <code>url</code>也不会有值）。</p><p>可以通过在 <code>&lt;script&gt;</code> 使用 <code>crossorigin</code> 属性并要求服务器发送适当的 CORS HTTP 响应头来解决。</p><h3 id="资源加载错误" tabindex="-1">资源加载错误 <a class="header-anchor" href="#资源加载错误" aria-label="Permalink to &quot;资源加载错误&quot;">​</a></h3><p>当一项资源加载或运行失败时，对应的元素会触发<code>error</code>事件，这些事件不会向上冒泡到window，不过能被<code>window.addEventListener</code>在捕获阶段捕获。</p><p>当然，由于<code>addEventListener</code>也能够捕获<code>js</code>运行时错误，需要过滤这部分，避免与<code>window.onerror</code>上报的重复。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.srcElement;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isElementTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLScriptElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLLinkElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLImageElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLVideoElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLAudioElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLIFrameElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isElementTarget) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// js error不再处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 一般上报target.outerHTML</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; // yes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; // yes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt; // yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xxxx&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // no</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// no</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="promise错误" tabindex="-1">Promise错误 <a class="header-anchor" href="#promise错误" aria-label="Permalink to &quot;Promise错误&quot;">​</a></h3><p><code>Promise</code>实例从<code>pending</code>转变为<code>rejected</code>时，如果没有<code>catch</code>捕获，将抛出<code>Uncaught(in promise) Error</code>。可以通过<code>addEventListener(&#39;unhandledrejection&#39;,)</code>捕获该错误。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unhandledrejection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.reason) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 一般上报 event.reason.message || event.reason 和 event.reason.stack</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// yes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b} ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// yes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// yes</span></span></code></pre></div><h3 id="vue错误" tabindex="-1">Vue错误 <a class="header-anchor" href="#vue错误" aria-label="Permalink to &quot;Vue错误&quot;">​</a></h3><p><code>Vue</code>通过<code>Vue.config.errorHandler</code>捕获所有Vue单文件组件或者Vue.extend继承的代码内的错误。</p><p>模板引用变量错误并不会被<code>errorHandler</code>捕获，而是被<code>warnHandler</code>捕获。</p><h1 id="页面优化" tabindex="-1">页面优化 <a class="header-anchor" href="#页面优化" aria-label="Permalink to &quot;页面优化&quot;">​</a></h1><h2 id="降低延迟" tabindex="-1">降低延迟 <a class="header-anchor" href="#降低延迟" aria-label="Permalink to &quot;降低延迟&quot;">​</a></h2><h3 id="基于文档结构" tabindex="-1">基于文档结构 <a class="header-anchor" href="#基于文档结构" aria-label="Permalink to &quot;基于文档结构&quot;">​</a></h3><p>优先安排关键网络资源，尽早分派请求。</p><ul><li>CSS和JavaScript等重要资源应该尽早在文档中出现。</li><li>尽早交付CSS，从而解除渲染阻塞并让JavaScript执行。</li><li>推迟非关键性JavaScript，避免阻塞DOM和CSSOM构建。</li></ul><h3 id="推测性优化" tabindex="-1">推测性优化 <a class="header-anchor" href="#推测性优化" aria-label="Permalink to &quot;推测性优化&quot;">​</a></h3><p>一般可利用<code>link</code>标签的<code>rel</code>属性来做到。</p><ul><li>DNS预解析。<code>dns-prefetch</code></li><li>TCP预连接。</li><li>延迟加载：减少页面首屏加载时需要请求的资源。</li><li>预加载：预先加载之后可能用到的资源。<code>prefetch</code>，<code>subresource</code></li><li>预渲染：在隐藏的标签页中预先渲染整个页面。<code>prerender</code></li></ul><h2 id="页面内容" tabindex="-1">页面内容 <a class="header-anchor" href="#页面内容" aria-label="Permalink to &quot;页面内容&quot;">​</a></h2><ul><li>减少 HTTP 请求数：主要通过文件合并、css 雪碧图、使用 base64图片等。</li><li>避免重定向：这会导致多一次请求。</li></ul><blockquote><p>最常见的重定向是：URL 末尾应该添加<code>/</code>但未添加。</p></blockquote><ul><li><p>资源缓存：对常用不变的资源进行缓存。</p></li><li><p>减少DOM元素数量。</p></li></ul><blockquote><p>不用表格，不用一堆<code>div</code>，尽量用伪元素。</p></blockquote><ul><li>划分内容到不同域名：每个域的并行线程有限制（4~6）。</li></ul><blockquote><p>同时为了避免DNS查询损耗，一般用2~4个域名。</p></blockquote><ul><li>减少iframe：加载代价昂贵、阻塞页面 load 事件。</li></ul><h2 id="服务器" tabindex="-1">服务器 <a class="header-anchor" href="#服务器" aria-label="Permalink to &quot;服务器&quot;">​</a></h2><ul><li>使用CDN：内容分发网络通过分散web服务器的地理位置，来提高响应速度。</li></ul><blockquote><p>一般地，服务器选址是基于网络距离来考虑的。</p></blockquote><ul><li>启用Gzip：压缩资源。</li></ul><blockquote><p>HTTP/1.1开始，web客户端有支持压缩的请求头。</p></blockquote><ul><li>获取数据用GET：POST请求时分成两步，先发送Http Header，再发送data。</li><li>避免空src或href：即使是空的，浏览器也可能会向服务器发起请求。</li></ul><h2 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h2><ul><li>减少 Cookie 大小。</li><li>静态资源使用无Cookie域名</li></ul><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h2><ul><li>把样式表放在<code>&lt;head&gt;</code>中，快点加载CSS文件，避免白屏。</li><li>不使用CSS表达式。</li><li><code>&lt;link&gt;</code>替代<code>@import</code>：对于IE某些版本，@import的行为和放在页面底部一样。</li></ul><h2 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-label="Permalink to &quot;JS&quot;">​</a></h2><ul><li>把脚本放在页面底部，或者考虑<code>defer</code>或<code>async</code>属性。</li><li>使用外部JavaScript和CSS，这些可以被浏览器缓存。</li><li>压缩JavaScript和CSS，去除空格或注释等。</li><li>减少DOM操作。</li></ul><p>参考：<a href="https://juejin.im/post/5b73ef38f265da281e048e51#heading-10" target="_blank" rel="noreferrer">《前端性能优化之雅虎35条军规》</a></p>`,77),k=[p];function r(d,o,E,c,g,y){return a(),i("div",null,k)}const D=s(h,[["render",r]]);export{F as __pageData,D as default};
