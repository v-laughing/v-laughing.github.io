import{_ as n,C as r,c as h,o as p,a4 as a,G as i,w as s,a as l}from"./chunks/framework.DdddRsJj.js";const d="/assets/image-20191207222237925.Ca31giWk.png",o="/assets/image-20191207210437023.nIzA1ILs.png",k="/assets/image-20191207221744244.CjEI0Lmu.png",c="/assets/image-20191207221920368.DTomJ24c.png",g="/assets/image-20191207222102010.GA1OpmrM.png",y="/assets/image-20191207222134306.zPHBaI4R.png",b="/assets/image-20191207213523777.x-f8PE7h.png",E="/assets/image-20191207214442687.D-bMAz0u.png",m="/assets/image-20191207220440451.aUi9WIqq.png",u="/assets/image-20191207220831843.BX4x9400.png",x="/assets/image-20191207221313819.C6o-2XK1.png",A="data:image/png;base64,",_="data:image/png;base64,",q="/assets/image-20191208171445674.BfEOl8JA.png",C="/assets/1d28ad05-39e5-49a2-a6a1-a6f496adba6a.BZX-s8Q-.png",T="/assets/ac929ea3-daca-40ec-9e95-4b2fa6678243.Dakyls5R.png",D="data:image/png;base64,",S="/assets/14389ea4-8d96-4e96-9f76-564ca3324c1e.CMrzmGbV.png",X=JSON.parse('{"title":"一、事务","description":"","frontmatter":{},"headers":[],"relativePath":"cs/database/principle.md","filePath":"cs/database/principle.md"}'),f={name:"cs/database/principle.md"};function F(I,t,v,P,R,M){const e=r("font");return p(),h("div",null,[t[2]||(t[2]=a('<h1 id="一、事务" tabindex="-1">一、事务 <a class="header-anchor" href="#一、事务" aria-label="Permalink to &quot;一、事务&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p>事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p><p><img src="'+d+'" alt="avatar"><br></p><h2 id="acid" tabindex="-1">ACID <a class="header-anchor" href="#acid" aria-label="Permalink to &quot;ACID&quot;">​</a></h2><h3 id="_1-原子性-atomicity" tabindex="-1">1. 原子性（Atomicity） <a class="header-anchor" href="#_1-原子性-atomicity" aria-label="Permalink to &quot;1. 原子性（Atomicity）&quot;">​</a></h3><p>能够在<mark>错误时中止事务</mark>， 丢弃该事务进行的所有写入变更的能力。</p><p>事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。</p><p>回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时<mark>反向执行</mark>这些修改操作即可。</p><h3 id="_2-一致性-consistency" tabindex="-1">2. 一致性（Consistency） <a class="header-anchor" href="#_2-一致性-consistency" aria-label="Permalink to &quot;2. 一致性（Consistency）&quot;">​</a></h3><p>数据库在应用程序的某些特定概念中处于“良好状态”。或者说，在事务前后，数据库对数据的一组特定陈述必须始终成立。</p><p>特定陈述由应用程序所定义，因此<mark>应用程序要负责</mark>正确定义它的事 务， 并保持一致性。</p><h3 id="_3-隔离性-isolation" tabindex="-1">3. 隔离性（Isolation） <a class="header-anchor" href="#_3-隔离性-isolation" aria-label="Permalink to &quot;3. 隔离性（Isolation）&quot;">​</a></h3><p>针对<mark>并发情况</mark>。 一个事务所做的修改在<mark>最终提交以前</mark>，<mark>对其它事务是不可见的</mark>。</p><h3 id="_4-持久性-durability" tabindex="-1">4. 持久性（Durability） <a class="header-anchor" href="#_4-持久性-durability" aria-label="Permalink to &quot;4. 持久性（Durability）&quot;">​</a></h3><p>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</p><p>系统发生奔溃可以用<mark>重做日志</mark>（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是<mark>数据页的物理修改</mark>。</p><hr><p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：</p><ul><li>只有满足一致性，事务的执行结果才是正确的。</li><li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li><li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li><li>事务满足持久化是为了能应对系统崩溃的情况。</li></ul><p><img src="'+o+'" alt="avatar"><br></p><h2 id="autocommit" tabindex="-1">AUTOCOMMIT <a class="header-anchor" href="#autocommit" aria-label="Permalink to &quot;AUTOCOMMIT&quot;">​</a></h2><p>MySQL 默认采用自动提交模式。也就是说，如果不显式使用<code>START TRANSACTION</code>语句来开始一个事务，那么每个查询操作都会被当做一个事务并自动提交。</p><h1 id="二、并发一致性问题" tabindex="-1">二、并发一致性问题 <a class="header-anchor" href="#二、并发一致性问题" aria-label="Permalink to &quot;二、并发一致性问题&quot;">​</a></h1><p>在并发环境下，<mark>事务的隔离性很难保证</mark>，因此会出现很多并发一致性问题。</p><h2 id="丢失修改" tabindex="-1">丢失修改 <a class="header-anchor" href="#丢失修改" aria-label="Permalink to &quot;丢失修改&quot;">​</a></h2><p><strong>写-写冲突</strong></p><p>丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。一般在现实生活中常会遇到，例如：T<sub>1</sub> 和 T<sub>2</sub> 两个事务都对一个数据进行修改，T<sub>1</sub> 先修改并提交生效，T<sub>2</sub> 随后修改，<mark>T<sub>2</sub> 的修改覆盖了 T<sub>1</sub> 的修改。</mark></p><p><img src="'+k+'" alt="avatar"><br></p><h2 id="读脏数据" tabindex="-1">读脏数据 <a class="header-anchor" href="#读脏数据" aria-label="Permalink to &quot;读脏数据&quot;">​</a></h2><p><strong>写-读冲突</strong></p><p>读脏数据指在不同的事务下，当前事务可以<mark>读到另外事务未提交的数据</mark>。例如：T<sub>1</sub> 修改一个数据但未提交，T<sub>2</sub> 随后读取这个数据。如果 T<sub>1</sub> 撤销了这次修改，那么 T<sub>2</sub> 读取的数据是脏数据。</p><p><img src="'+c+'" alt="avatar"><br></p><h2 id="不可重复读" tabindex="-1">不可重复读 <a class="header-anchor" href="#不可重复读" aria-label="Permalink to &quot;不可重复读&quot;">​</a></h2><p><strong>读-写冲突</strong></p><p>不可重复读指在一个事务内多次读取同一数据集合。在这一事务还未结束前，另一事务也访问了该同一数据集合并做了修改，由于第二个事务的修改，第一次事务的<mark>两次读取的数据可能不一致</mark>。例如：T<sub>2</sub> 读取一个数据，T<sub>1</sub> 对该数据做了修改。如果 T<sub>2</sub> 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p><p><img src="'+g+'" alt="avatar"><br></p><h2 id="幻影读" tabindex="-1">幻影读 <a class="header-anchor" href="#幻影读" aria-label="Permalink to &quot;幻影读&quot;">​</a></h2><p><strong>读-写冲突：非同一数据，但有关联</strong></p><p>幻读本质上也属于不可重复读的情况，T<sub>1</sub> 读取某个范围的数据，T<sub>2</sub> 在这个范围内插入新的数据，T<sub>1</sub> 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p><p><img src="'+y+'" alt="avatar"><br></p><hr><p>产生并发不一致性问题的主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。<mark>数据库管理系统提供了事务的隔离级别</mark>，让用户以一种更轻松的方式处理并发一致性问题。</p><h1 id="三、封锁" tabindex="-1">三、封锁 <a class="header-anchor" href="#三、封锁" aria-label="Permalink to &quot;三、封锁&quot;">​</a></h1><h2 id="封锁粒度" tabindex="-1">封锁粒度 <a class="header-anchor" href="#封锁粒度" aria-label="Permalink to &quot;封锁粒度&quot;">​</a></h2><p>MySQL 中提供了两种封锁粒度：行级锁以及表级锁。</p><p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。</p><p>但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。</p><p>在选择封锁粒度时，需要在<mark>锁开销和并发程度</mark>之间做一个权衡。</p><h2 id="封锁类型" tabindex="-1">封锁类型 <a class="header-anchor" href="#封锁类型" aria-label="Permalink to &quot;封锁类型&quot;">​</a></h2><h3 id="_1-读写锁" tabindex="-1">1. 读写锁 <a class="header-anchor" href="#_1-读写锁" aria-label="Permalink to &quot;1. 读写锁&quot;">​</a></h3><ul><li>互斥锁（Exclusive），简写为 X 锁，又称写锁。</li><li>共享锁（Shared），简写为 S 锁，又称读锁。</li></ul><p>有以下两个规定：</p><ul><li>一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。</li><li>一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</li></ul><p>锁的兼容关系如下：</p><p><img src="'+b+'" alt="avatar"><br></p><h3 id="_2-意向锁" tabindex="-1">2. 意向锁 <a class="header-anchor" href="#_2-意向锁" aria-label="Permalink to &quot;2. 意向锁&quot;">​</a></h3><p>使用意向锁（Intention Locks）可以更容易地<mark>支持多粒度封锁</mark>。本质上是通过全局变量的引入来避免对行级锁的扫描。</p><p>在<mark>存在行级锁和表级锁</mark>的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p><p>意向锁在原来的 X/S 锁之上引入了 IX/IS，<mark>IX/IS 都是表锁</mark>，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：</p><ul><li>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；</li><li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li></ul><p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。</p><p>各种锁的兼容关系如下：</p><p><img src="'+E+'" alt="avatar"><br></p><p>解释如下：</p><ul><li><mark>任意 IS/IX 锁之间都是兼容的</mark>，因为它们只表示想要对表加锁，而不是真正加锁；</li><li>这里兼容关系针对的是表级锁，而表级的 IX 锁和行级的 X 锁兼容，两个事务可以对两个数据行加 X 锁。（事务 T<sub>1</sub> 想要对数据行 R<sub>1</sub> 加 X 锁，事务 T<sub>2</sub> 想要对同一个表的数据行 R<sub>2</sub> 加 X 锁，两个事务都需要对该表加 IX 锁，但是 IX 锁是兼容的，并且 IX 锁与行级的 X 锁也是兼容的，因此两个事务都能加锁成功，对同一个表中的两个数据行做修改。）</li></ul><h3 id="_3-乐观锁与悲观锁" tabindex="-1">3. 乐观锁与悲观锁 <a class="header-anchor" href="#_3-乐观锁与悲观锁" aria-label="Permalink to &quot;3. 乐观锁与悲观锁&quot;">​</a></h3><p>读取或更新数据前采取的一种假定。</p><ul><li>乐观锁假定不会发生并发冲突，故没有对数据上锁。等到当前事务结束之后再去检查是否被更改，如果是，则撤销当前操作，让用户重试。</li><li>悲观锁假定会发生并发冲突，对数据加锁。</li></ul><p>乐观锁适用于多读的应用类型，悲观锁适用于多写的应用类型。</p><h4 id="乐观锁实现" tabindex="-1">乐观锁实现 <a class="header-anchor" href="#乐观锁实现" aria-label="Permalink to &quot;乐观锁实现&quot;">​</a></h4><p><strong>版本号机制</strong> 数据表中加上一个数据版本号version字段，每一次更新数据行，其version字段加1。通过比较事务开始前的某一数据行的版本号与事务结束时的版本号即可判断该行是否被修改。</p><p><strong>时间戳机制</strong> 本质同版本号机制，区别在于：表增加时间戳字段，每一次更新数据行，时间戳置为当前时间戳。</p><h2 id="封锁协议" tabindex="-1">封锁协议 <a class="header-anchor" href="#封锁协议" aria-label="Permalink to &quot;封锁协议&quot;">​</a></h2><h3 id="_1-三级封锁协议" tabindex="-1">1. 三级封锁协议 <a class="header-anchor" href="#_1-三级封锁协议" aria-label="Permalink to &quot;1. 三级封锁协议&quot;">​</a></h3><p><strong>一级封锁协议</strong></p><p>事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。</p><p>可以<mark>解决丢失修改问题</mark>，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。</p><p><img src="'+m+'" alt="avatar"><br></p><p><strong>二级封锁协议</strong></p><p>在一级的基础上，要求<mark>读取数据 A 时必须加 S 锁</mark>，读取完马上释放 S 锁。</p><p>可以<mark>解决读脏数据问题</mark>，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。</p><p><img src="'+u+'" alt="avatar"><br></p><p><strong>三级封锁协议</strong></p><p>在二级的基础上，要求读取数据 A 时必须加 S 锁，直到<mark>事务结束了才能释放 S 锁</mark>。</p><p>可以<mark>解决不可重复读的问题</mark>，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。</p><p><img src="'+x+`" alt="avatar"><br></p><h3 id="_2-两段锁协议" tabindex="-1">2. 两段锁协议 <a class="header-anchor" href="#_2-两段锁协议" aria-label="Permalink to &quot;2. 两段锁协议&quot;">​</a></h3><p><mark>所有的并发事务</mark>分为加锁和解锁<mark>两个阶段</mark>。</p><p>可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。串行执行的事务互不干扰，不会出现并发一致性问题。</p><p>事务遵循两段锁协议是<mark>保证可串行化调度的充分条件</mark>。例如以下操作满足两段锁协议，它是可串行化调度。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lock-x(A)...lock-s(B)...lock-s(C)...unlock(A)...unlock(C)...unlock(B)</span></span></code></pre></div><p>但不是必要条件，例如以下操作不满足两段锁协议，但它还是可串行化调度。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lock-x(A)...unlock(A)...lock-s(B)...unlock(B)...lock-s(C)...unlock(C)</span></span></code></pre></div><h2 id="mysql-隐式与显示锁定" tabindex="-1">MySQL 隐式与显示锁定 <a class="header-anchor" href="#mysql-隐式与显示锁定" aria-label="Permalink to &quot;MySQL 隐式与显示锁定&quot;">​</a></h2><p>MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。</p><p>InnoDB 也可以使用特定的语句进行显示锁定：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ... LOCK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">In</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHARE MODE;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h1 id="四、隔离级别" tabindex="-1">四、隔离级别 <a class="header-anchor" href="#四、隔离级别" aria-label="Permalink to &quot;四、隔离级别&quot;">​</a></h1><p>隔离级别越高，对数据库的性能的要求越大。一般默认设置的隔离级别为可重复读。</p><h2 id="未提交读-read-uncommitted" tabindex="-1">未提交读（READ UNCOMMITTED） <a class="header-anchor" href="#未提交读-read-uncommitted" aria-label="Permalink to &quot;未提交读（READ UNCOMMITTED）&quot;">​</a></h2><p>事务中的修改，即使没有提交，对其它事务也是可见的。</p><h2 id="提交读-read-committed" tabindex="-1">提交读（READ COMMITTED） <a class="header-anchor" href="#提交读-read-committed" aria-label="Permalink to &quot;提交读（READ COMMITTED）&quot;">​</a></h2><p>一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。</p><h2 id="可重复读-repeatable-read" tabindex="-1">可重复读（REPEATABLE READ） <a class="header-anchor" href="#可重复读-repeatable-read" aria-label="Permalink to &quot;可重复读（REPEATABLE READ）&quot;">​</a></h2><p>保证在同一个事务中多次读取同一数据的结果是一样的。</p><h2 id="可串行化-serializable" tabindex="-1">可串行化（SERIALIZABLE） <a class="header-anchor" href="#可串行化-serializable" aria-label="Permalink to &quot;可串行化（SERIALIZABLE）&quot;">​</a></h2><p>强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。</p><p>该隔离级别需要加锁实现，因为要使用加锁机制保证同一时间只有一个事务执行，也就是保证事务串行执行。</p><hr><p><img src="`+A+`" alt="avatar"><br></p><h1 id="五、多版本并发控制" tabindex="-1">五、多版本并发控制 <a class="header-anchor" href="#五、多版本并发控制" aria-label="Permalink to &quot;五、多版本并发控制&quot;">​</a></h1><p>多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎<mark>实现隔离级别的一种具体方式</mark>，用于<mark>实现提交读和可重复读</mark>这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p><h2 id="基本思想" tabindex="-1">基本思想 <a class="header-anchor" href="#基本思想" aria-label="Permalink to &quot;基本思想&quot;">​</a></h2><p>在封锁一节中提到，加锁能解决多个事务同时执行时出现的并发一致性问题。在实际场景中<mark>读操作往往多于写操作</mark>，因此又引入了读写锁来避免不必要的加锁操作，例如读和读没有互斥关系。读写锁中读和写操作仍然是互斥的，而 MVCC 利用了多版本的思想，<mark>写操作更新最新的版本快照，而读操作去读旧版本快照</mark>，没有互斥关系，这一点和 CopyOnWrite 类似。</p><p>在 MVCC 中事务的修改操作（DELETE、INSERT、UPDATE）会为数据行新增一个版本快照。</p><p>脏读和不可重复读最根本的原因是事务读取到其它事务未提交的修改。在事务进行读取操作时，为了解决脏读和不可重复读问题，MVCC 规定只能读取已经提交的快照。当然一个事务可以读取自身未提交的快照，这不算是脏读。</p><h2 id="实现方式" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式" aria-label="Permalink to &quot;实现方式&quot;">​</a></h2><ol><li><p>将数据记录的多个版本保存在数据库中，当这些不同版本数据不再需要时，垃圾收集器回收这些记录。这个方式被PostgreSQL和Firebird/Interbase采用。</p></li><li><p>在数据库保存最新版本的数据，但是会在使用undo时动态重构旧版本数据。这种方式被Oracle和MySQL/InnoDB使用。</p></li></ol><p>下面简述UNDO方式。</p><h2 id="版本号" tabindex="-1">版本号 <a class="header-anchor" href="#版本号" aria-label="Permalink to &quot;版本号&quot;">​</a></h2><ul><li>系统版本号 SYS_ID：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。</li><li>事务版本号 TRX_ID ：事务开始时的系统版本号。</li></ul><h2 id="undo-日志" tabindex="-1">Undo 日志 <a class="header-anchor" href="#undo-日志" aria-label="Permalink to &quot;Undo 日志&quot;">​</a></h2><p>MVCC 的多版本指的是多个版本的快照，<mark>快照存储在 Undo 日志中</mark>，该日志通过回滚指针 ROLL_PTR 把<mark>一个数据行的所有快照连接起来</mark>。</p><p>例如在 MySQL 创建一个表 t，包含主键 id 和一个字段 x。我们先插入一个数据行，然后对该数据行执行两次更新操作。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t(id, x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>因为没有使用 <code>START TRANSACTION</code> 将上面的操作当成一个事务来执行，根据 MySQL 的 AUTOCOMMIT 机制，每个操作都会被当成一个事务来执行，所以上面的操作总共涉及到三个事务。快照中除了记录事务版本号 TRX_ID 和操作之外，还记录了一个 bit 的 DEL 字段，用于标记是否被删除。</p><p><img src="`+_+'" alt="avatar"><br></p><p>INSERT、UPDATE、DELETE 操作会创建一个日志，并将事务版本号 TRX_ID 写入。DELETE 可以看成是一个特殊的 UPDATE，还会额外将 DEL 字段设置为 1。</p><h2 id="readview" tabindex="-1">ReadView <a class="header-anchor" href="#readview" aria-label="Permalink to &quot;ReadView&quot;">​</a></h2><p>MVCC 维护了一个 ReadView 结构，主要包含了<mark>当前系统未提交的事务列表</mark> TRX_IDs {TRX_ID_1, TRX_ID_2, ...}，还有该列表的最小值 TRX_ID_MIN 和 TRX_ID_MAX。</p><p><img src="'+q+`" alt="avatar"><br></p><p>在进行 SELECT 操作时，根据数据行快照的 TRX_ID 与 TRX_ID_MIN 和 TRX_ID_MAX 之间的关系，从而判断数据行快照是否可以使用：</p><ul><li><p>TRX_ID &lt; TRX_ID_MIN，表示该数据行快照时在当前所有未提交事务之前进行更改的，因此可以使用。</p></li><li><p>TRX_ID &gt; TRX_ID_MAX，表示该数据行快照是在事务启动之后被更改的，因此不可使用。</p></li><li><p>TRX_ID_MIN &lt;= TRX_ID &lt;= TRX_ID_MAX，需要根据隔离级别再进行判断：</p><ul><li>提交读：如果 TRX_ID 在 TRX_IDs 列表中，表示该数据行快照对应的事务还未提交，则该快照不可使用。否则表示已经提交，可以使用。</li><li>可重复读：都不可以使用。因为如果可以使用的话，那么其它事务也可以读到这个数据行快照并进行修改，那么当前事务再去读这个数据行得到的值就会发生改变，也就是出现了不可重复读问题。</li></ul></li></ul><p>在数据行快照不可使用的情况下，需要沿着 Undo Log 的回滚指针 ROLL_PTR 找到下一个快照，再进行上面的判断。</p><h2 id="快照读与当前读" tabindex="-1">快照读与当前读 <a class="header-anchor" href="#快照读与当前读" aria-label="Permalink to &quot;快照读与当前读&quot;">​</a></h2><h3 id="_1-快照读" tabindex="-1">1. 快照读 <a class="header-anchor" href="#_1-快照读" aria-label="Permalink to &quot;1. 快照读&quot;">​</a></h3><p>MVCC 的 SELECT 操作是快照中的数据，不需要进行加锁操作。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...;</span></span></code></pre></div><h3 id="_2-当前读" tabindex="-1">2. 当前读 <a class="header-anchor" href="#_2-当前读" aria-label="Permalink to &quot;2. 当前读&quot;">​</a></h3><p>MVCC 其它会对数据库进行修改的操作（INSERT、UPDATE、DELETE）需要<mark>进行加锁操作</mark>，从而读取最新的数据。可以看到 MVCC 并不是完全不用加锁，而只是避免了 SELECT 的加锁操作。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DELETE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>在进行 SELECT 操作时，可以强制指定进行加锁操作。以下第一个语句需要加 S 锁，第二个需要加 X 锁。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ? lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> share mode;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h1 id="六、next-key-locks-todo" tabindex="-1">六、Next-Key Locks[TODO] <a class="header-anchor" href="#六、next-key-locks-todo" aria-label="Permalink to &quot;六、Next-Key Locks[TODO]&quot;">​</a></h1><p>Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实TODO现。</p><p><mark>MVCC 不解决幻影读问题</mark>，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。</p><h2 id="record-locks" tabindex="-1">Record Locks <a class="header-anchor" href="#record-locks" aria-label="Permalink to &quot;Record Locks&quot;">​</a></h2><p><mark>锁定</mark>一个记录上的<mark>索引</mark>，而不是记录本身。</p><p>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。</p><h2 id="gap-locks" tabindex="-1">Gap Locks <a class="header-anchor" href="#gap-locks" aria-label="Permalink to &quot;Gap Locks&quot;">​</a></h2><p>锁定索引之间的间隙，但是不包含索引本身。目的是为了<mark>防止同一事务的两次当前读</mark>，出现幻读的情况。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BETWEEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="next-key-locks" tabindex="-1">Next-Key Locks <a class="header-anchor" href="#next-key-locks" aria-label="Permalink to &quot;Next-Key Locks&quot;">​</a></h2><p>它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。它锁定一个前开后闭区间，例如一个索引包含以下值：10, 11, 13, and 20，那么可能需要锁定的区有：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">∞, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">∞)</span></span></code></pre></div><p>例如当一个事务的命令为</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ci </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ci</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>则索引ci被锁定的值区间有<code>(-∞, 10]</code>和<code>(10,11]</code>，其他事务无法在此区间中插入值。</p><h1 id="七、关系数据库设计理论" tabindex="-1">七、关系数据库设计理论 <a class="header-anchor" href="#七、关系数据库设计理论" aria-label="Permalink to &quot;七、关系数据库设计理论&quot;">​</a></h1><h2 id="函数依赖" tabindex="-1">函数依赖 <a class="header-anchor" href="#函数依赖" aria-label="Permalink to &quot;函数依赖&quot;">​</a></h2><p>记 A-&gt;B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。</p><p>如果 {A1，A2，... ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。</p><p>对于 A-&gt;B，如果能找到 A 的真子集 A&#39;，使得 A&#39;-&gt; B，那么 A-&gt;B 就是部分函数依赖，否则就是完全函数依赖。</p><p>对于 A-&gt;B，B-&gt;C，则 A-&gt;C 是一个传递函数依赖。</p><h2 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h2><p>以下的学生课程关系的函数依赖为 {Sno, Cname} -&gt; {Sname, Sdept, Mname, Grade}，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。</p><table tabindex="0"><thead><tr><th style="text-align:center;">Sno</th><th style="text-align:center;">Sname</th><th style="text-align:center;">Sdept</th><th style="text-align:center;">Mname</th><th style="text-align:center;">Cname</th><th style="text-align:center;">Grade</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">学生-1</td><td style="text-align:center;">学院-1</td><td style="text-align:center;">院长-1</td><td style="text-align:center;">课程-1</td><td style="text-align:center;">90</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">学生-2</td><td style="text-align:center;">学院-2</td><td style="text-align:center;">院长-2</td><td style="text-align:center;">课程-2</td><td style="text-align:center;">80</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">学生-2</td><td style="text-align:center;">学院-2</td><td style="text-align:center;">院长-2</td><td style="text-align:center;">课程-1</td><td style="text-align:center;">100</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">学生-3</td><td style="text-align:center;">学院-2</td><td style="text-align:center;">院长-2</td><td style="text-align:center;">课程-2</td><td style="text-align:center;">95</td></tr></tbody></table><p>不符合范式的关系，会产生很多异常，主要有以下四种异常：</p><ul><li>冗余数据：例如 <code>学生-2</code> 出现了两次。</li><li>修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。</li><li>删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 <code>课程-1</code> 需要删除第一行和第三行，那么 <code>学生-1</code> 的信息就会丢失。</li><li>插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。</li></ul><h2 id="范式" tabindex="-1">范式 <a class="header-anchor" href="#范式" aria-label="Permalink to &quot;范式&quot;">​</a></h2><p>范式理论是为了解决以上提到四种异常。</p><p>高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。</p><h3 id="_1-第一范式-1nf" tabindex="-1">1. 第一范式 (1NF) <a class="header-anchor" href="#_1-第一范式-1nf" aria-label="Permalink to &quot;1. 第一范式 (1NF)&quot;">​</a></h3><p>属性不可分。强调的是列的原子性，即列不能够再分成其他几列。例如，一个联系人有家庭电话和公司电话，这里要分为两列。</p><h3 id="_2-第二范式-2nf" tabindex="-1">2. 第二范式 (2NF) <a class="header-anchor" href="#_2-第二范式-2nf" aria-label="Permalink to &quot;2. 第二范式 (2NF)&quot;">​</a></h3><p>每个非主属性<mark>完全函数依赖于键码</mark>。</p><p>可以通过分解来满足。</p>`,178)),i(e,{size:"4"},{default:s(()=>[...t[0]||(t[0]=[l(" **分解前** ",-1)])]),_:1}),t[3]||(t[3]=a('<br><table tabindex="0"><thead><tr><th style="text-align:center;">Sno</th><th style="text-align:center;">Sname</th><th style="text-align:center;">Sdept</th><th style="text-align:center;">Mname</th><th style="text-align:center;">Cname</th><th style="text-align:center;">Grade</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">学生-1</td><td style="text-align:center;">学院-1</td><td style="text-align:center;">院长-1</td><td style="text-align:center;">课程-1</td><td style="text-align:center;">90</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">学生-2</td><td style="text-align:center;">学院-2</td><td style="text-align:center;">院长-2</td><td style="text-align:center;">课程-2</td><td style="text-align:center;">80</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">学生-2</td><td style="text-align:center;">学院-2</td><td style="text-align:center;">院长-2</td><td style="text-align:center;">课程-1</td><td style="text-align:center;">100</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">学生-3</td><td style="text-align:center;">学院-2</td><td style="text-align:center;">院长-2</td><td style="text-align:center;">课程-2</td><td style="text-align:center;">95</td></tr></tbody></table><p>以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：</p><ul><li>Sno -&gt; Sname, Sdept</li><li>Sdept -&gt; Mname</li><li>Sno, Cname-&gt; Grade</li></ul><p>Grade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。</p><p>Sname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。</p>',6)),i(e,{size:"4"},{default:s(()=>[...t[1]||(t[1]=[l(" **分解后** ",-1)])]),_:1}),t[4]||(t[4]=a('<br><p>关系-1</p><table tabindex="0"><thead><tr><th style="text-align:center;">Sno</th><th style="text-align:center;">Sname</th><th style="text-align:center;">Sdept</th><th style="text-align:center;">Mname</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">学生-1</td><td style="text-align:center;">学院-1</td><td style="text-align:center;">院长-1</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">学生-2</td><td style="text-align:center;">学院-2</td><td style="text-align:center;">院长-2</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">学生-3</td><td style="text-align:center;">学院-2</td><td style="text-align:center;">院长-2</td></tr></tbody></table><p>有以下函数依赖：</p><ul><li>Sno -&gt; Sname, Sdept</li><li>Sdept -&gt; Mname</li></ul><p>关系-2</p><table tabindex="0"><thead><tr><th style="text-align:center;">Sno</th><th style="text-align:center;">Cname</th><th style="text-align:center;">Grade</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">课程-1</td><td style="text-align:center;">90</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">课程-2</td><td style="text-align:center;">80</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">课程-1</td><td style="text-align:center;">100</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">课程-2</td><td style="text-align:center;">95</td></tr></tbody></table><p>有以下函数依赖：</p><ul><li>Sno, Cname -&gt; Grade</li></ul><h3 id="_3-第三范式-3nf" tabindex="-1">3. 第三范式 (3NF) <a class="header-anchor" href="#_3-第三范式-3nf" aria-label="Permalink to &quot;3. 第三范式 (3NF)&quot;">​</a></h3><p>非主属性<mark>不传递函数依赖于键码</mark>。</p><p>上面的 关系-1 中存在以下传递函数依赖：</p><ul><li>Sno -&gt; Sdept -&gt; Mname</li></ul><p>可以进行以下分解：</p><p>关系-11</p><table tabindex="0"><thead><tr><th style="text-align:center;">Sno</th><th style="text-align:center;">Sname</th><th style="text-align:center;">Sdept</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">学生-1</td><td style="text-align:center;">学院-1</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">学生-2</td><td style="text-align:center;">学院-2</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">学生-3</td><td style="text-align:center;">学院-2</td></tr></tbody></table><p>关系-12</p><table tabindex="0"><thead><tr><th style="text-align:center;">Sdept</th><th style="text-align:center;">Mname</th></tr></thead><tbody><tr><td style="text-align:center;">学院-1</td><td style="text-align:center;">院长-1</td></tr><tr><td style="text-align:center;">学院-2</td><td style="text-align:center;">院长-2</td></tr></tbody></table><h1 id="八、er-图" tabindex="-1">八、ER 图 <a class="header-anchor" href="#八、er-图" aria-label="Permalink to &quot;八、ER 图&quot;">​</a></h1><p>Entity-Relationship，有三个组成部分：实体、属性、联系。</p><p>用来进行关系型数据库系统的概念设计。</p><h2 id="实体的三种联系" tabindex="-1">实体的三种联系 <a class="header-anchor" href="#实体的三种联系" aria-label="Permalink to &quot;实体的三种联系&quot;">​</a></h2><p>包含一对一，一对多，多对多三种。</p><ul><li>如果 A 到 B 是一对多关系，那么画个带箭头的线段指向 B；</li><li>如果是一对一，画两个带箭头的线段；</li><li>如果是多对多，画两个不带箭头的线段。</li></ul><p>下图的 Course 和 Student 是一对多的关系。</p><p><img src="'+C+'" alt="avatar | 380"><br></p><h2 id="表示出现多次的关系" tabindex="-1">表示出现多次的关系 <a class="header-anchor" href="#表示出现多次的关系" aria-label="Permalink to &quot;表示出现多次的关系&quot;">​</a></h2><p>一个实体在联系出现几次，就要用几条线连接。</p><p>下图表示一个课程的先修关系，先修关系出现两个 Course 实体，第一个是先修课程，后一个是后修课程，因此需要用两条线来表示这种关系。</p><p><img src="'+T+'" alt="avatar | 250"><br></p><h2 id="联系的多向性" tabindex="-1">联系的多向性 <a class="header-anchor" href="#联系的多向性" aria-label="Permalink to &quot;联系的多向性&quot;">​</a></h2><p>虽然老师可以开设多门课，并且可以教授多名学生，但是对于特定的学生和课程，只有一个老师教授，这就构成了一个三元联系。</p><p><img src="'+D+'" alt="avatar | 350"><br></p><h2 id="表示子类" tabindex="-1">表示子类 <a class="header-anchor" href="#表示子类" aria-label="Permalink to &quot;表示子类&quot;">​</a></h2><p>用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。</p><p><img src="'+S+'" alt="avatar | 450"><br></p><h1 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h1><ul><li>AbrahamSilberschatz, HenryF.Korth, S.Sudarshan, 等. 数据库系统概念 [M]. 机械工业出版社, 2006.</li><li>施瓦茨. 高性能 MYSQL(第3版)[M]. 电子工业出版社, 2013.</li><li>史嘉权. 数据库系统概论[M]. 清华大学出版社有限公司, 2006.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html" target="_blank" rel="noreferrer">The InnoDB Storage Engine</a></li><li><a href="https://www.slideshare.net/ErnestoHernandezRodriguez/transaction-isolation-levels" target="_blank" rel="noreferrer">Transaction isolation levels</a></li><li><a href="http://scanftree.com/dbms/2-phase-locking-protocol" target="_blank" rel="noreferrer">Concurrency Control</a></li><li><a href="https://www.slideshare.net/brshristov/the-nightmare-of-locking-blocking-and-isolation-levels-46391666" target="_blank" rel="noreferrer">The Nightmare of Locking, Blocking and Isolation Levels!</a></li><li><a href="https://aksakalli.github.io/2012/03/12/database-normalization-and-normal-forms-with-an-example.html" target="_blank" rel="noreferrer">Database Normalization and Normal Forms with an Example</a></li><li><a href="https://blog.jcole.us/2014/04/16/the-basics-of-the-innodb-undo-logging-and-history-system/" target="_blank" rel="noreferrer">The basics of the InnoDB undo logging and history system</a></li><li><a href="https://www.brightbox.com/blog/2013/10/31/on-mysql-locks/" target="_blank" rel="noreferrer">MySQL locking for the busy web developer</a></li><li><a href="https://draveness.me/mysql-innodb" target="_blank" rel="noreferrer">浅入浅出 MySQL 和 InnoDB</a></li><li><a href="https://tech.meituan.com/2014/08/20/innodb-lock.html" target="_blank" rel="noreferrer">Innodb 中的事务隔离级别和锁的关系</a></li></ul>',38))])}const B=n(f,[["render",F]]);export{X as __pageData,B as default};
