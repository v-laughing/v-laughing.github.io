import{_ as a,c as e,o as r,a4 as o}from"./chunks/framework.CBsUJNCA.js";const t="/assets/011f3ef6-d824-4d43-8b2c-36dab8eaaa72-1.BJB9E5uw.png",l="/assets/be608a77-7b7f-4f8e-87cc-f2237270bf69.DfZURagT.png",i="/assets/docker-filesystems-busyboxrw.ew5uib2R.png",_=JSON.parse('{"title":"一、解决的问题","description":"","frontmatter":{},"headers":[],"relativePath":"cs/tools/Docker.md","filePath":"cs/tools/Docker.md"}'),c={name:"cs/tools/Docker.md"},n=o('<nav class="table-of-contents"><ul><li><a href="#启动速度">启动速度</a></li><li><a href="#占用资源">占用资源</a></li><li><a href="#更容易迁移">更容易迁移</a></li><li><a href="#更容易维护">更容易维护</a></li><li><a href="#更容易扩展">更容易扩展</a></li><li><a href="#持续集成">持续集成</a></li><li><a href="#提供可伸缩的云服务">提供可伸缩的云服务</a></li><li><a href="#搭建微服务架构">搭建微服务架构</a></li></ul></nav><h1 id="一、解决的问题" tabindex="-1">一、解决的问题 <a class="header-anchor" href="#一、解决的问题" aria-label="Permalink to &quot;一、解决的问题&quot;">​</a></h1><p>由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多台机器上需要进行大量的环境配置操作。</p><p>Docker 主要<mark>解决环境配置问题</mark>，它是一种虚拟化技术，对进程进行隔离，被隔离的进程独立于宿主操作系统和其它隔离的进程。使用 Docker 可以不修改应用程序代码，不需要开发人员学习特定环境下的技术，就能够将现有的应用程序部署在其它机器上。</p><p><img src="'+t+'" alt="avatar | 400"><br></p><h1 id="二、与虚拟机的比较" tabindex="-1">二、与虚拟机的比较 <a class="header-anchor" href="#二、与虚拟机的比较" aria-label="Permalink to &quot;二、与虚拟机的比较&quot;">​</a></h1><p>虚拟机也是一种虚拟化技术，它与 Docker 最大的区别在于它是通过模拟硬件，并在硬件上安装操作系统来实现。</p><p><img src="'+l+'" alt="avatar | 500"><br></p><h2 id="启动速度" tabindex="-1">启动速度 <a class="header-anchor" href="#启动速度" aria-label="Permalink to &quot;启动速度&quot;">​</a></h2><p>启动虚拟机需要先启动虚拟机的操作系统，再启动应用，这个过程非常慢；</p><p>而启动 Docker 相当于启动宿主操作系统上的一个进程。</p><h2 id="占用资源" tabindex="-1">占用资源 <a class="header-anchor" href="#占用资源" aria-label="Permalink to &quot;占用资源&quot;">​</a></h2><p>虚拟机是一个完整的操作系统，需要占用大量的磁盘、内存和 CPU 资源，一台机器只能开启几十个的虚拟机。</p><p>而 Docker 只是一个进程，只需要将应用以及相关的组件打包，在运行时占用很少的资源，一台机器可以开启成千上万个 Docker。</p><h1 id="三、优势" tabindex="-1">三、优势 <a class="header-anchor" href="#三、优势" aria-label="Permalink to &quot;三、优势&quot;">​</a></h1><p>除了启动速度快以及占用资源少之外，Docker 具有以下优势：</p><h2 id="更容易迁移" tabindex="-1">更容易迁移 <a class="header-anchor" href="#更容易迁移" aria-label="Permalink to &quot;更容易迁移&quot;">​</a></h2><p>提供一致性的运行环境。已经打包好的应用可以在不同的机器上进行迁移，而不用担心环境变化导致无法运行。</p><h2 id="更容易维护" tabindex="-1">更容易维护 <a class="header-anchor" href="#更容易维护" aria-label="Permalink to &quot;更容易维护&quot;">​</a></h2><p>使用分层技术和镜像，使得应用可以更容易复用重复的部分。复用程度越高，维护工作也越容易。</p><h2 id="更容易扩展" tabindex="-1">更容易扩展 <a class="header-anchor" href="#更容易扩展" aria-label="Permalink to &quot;更容易扩展&quot;">​</a></h2><p>可以使用基础镜像进一步扩展得到新的镜像，并且官方和开源社区提供了大量的镜像，通过扩展这些镜像可以非常容易得到我们想要的镜像。</p><h1 id="四、使用场景" tabindex="-1">四、使用场景 <a class="header-anchor" href="#四、使用场景" aria-label="Permalink to &quot;四、使用场景&quot;">​</a></h1><h2 id="持续集成" tabindex="-1">持续集成 <a class="header-anchor" href="#持续集成" aria-label="Permalink to &quot;持续集成&quot;">​</a></h2><p>持续集成指的是频繁地将代码集成到主干上，这样能够更快地发现错误。</p><p>Docker 具有轻量级以及隔离性的特点，在将代码集成到一个 Docker 中不会对其它 Docker 产生影响。</p><h2 id="提供可伸缩的云服务" tabindex="-1">提供可伸缩的云服务 <a class="header-anchor" href="#提供可伸缩的云服务" aria-label="Permalink to &quot;提供可伸缩的云服务&quot;">​</a></h2><p>根据应用的负载情况，可以很容易地增加或者减少 Docker。</p><h2 id="搭建微服务架构" tabindex="-1">搭建微服务架构 <a class="header-anchor" href="#搭建微服务架构" aria-label="Permalink to &quot;搭建微服务架构&quot;">​</a></h2><p>Docker 轻量级的特点使得它很适合用于部署、维护、组合微服务。</p><h1 id="五、镜像与容器" tabindex="-1">五、镜像与容器 <a class="header-anchor" href="#五、镜像与容器" aria-label="Permalink to &quot;五、镜像与容器&quot;">​</a></h1><p>镜像是一种静态的结构，可以看成面向对象里面的类，而容器是镜像的一个实例。</p><p>镜像包含着容器运行时所需要的代码以及其它组件，它是一种分层结构，每一层都是只读的（read-only layers）。构建镜像时，会一层一层构建，前一层是后一层的基础。镜像的这种分层存储结构很适合镜像的复用以及定制。</p><p>构建容器时，通过在镜像的基础上添加一个可写层（writable layer），用来保存着容器运行过程中的修改。</p><p><img src="'+i+'" alt="avatar"><br></p><h1 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h1><ul><li><a href="https://blog.docker.com/2017/08/docker-101-introduction-docker-webinar-recap/" target="_blank" rel="noreferrer">DOCKER 101: INTRODUCTION TO DOCKER WEBINAR RECAP</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noreferrer">Docker 入门教程</a></li><li><a href="http://www.bogotobogo.com/DevOps/Docker/Docker_Container_vs_Virtual_Machine.php" target="_blank" rel="noreferrer">Docker container vs Virtual machine</a></li><li><a href="https://linoxide.com/linux-how-to/dockerfile-create-docker-container/" target="_blank" rel="noreferrer">How to Create Docker Container using Dockerfile</a></li><li><a href="http://www.cnblogs.com/sammyliu/p/5877964.html" target="_blank" rel="noreferrer">理解 Docker（2）：Docker 镜像</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/introduction/why.html" target="_blank" rel="noreferrer">为什么要使用 Docker？</a></li><li><a href="https://www.docker.com/what-docker" target="_blank" rel="noreferrer">What is Docker</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noreferrer">持续集成是什么？</a></li></ul>',37),h=[n];function s(p,d,k,f,b,u){return r(),e("div",null,h)}const D=a(c,[["render",s]]);export{_ as __pageData,D as default};
