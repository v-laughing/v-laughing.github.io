import{_ as i,c as a,o as e,a4 as t}from"./chunks/framework.DdddRsJj.js";const n="/assets/5-1.cn--zwEq.png",p="/assets/5-2.DoQnF7go.png",h="/assets/5-3.EisFJ2r9.png",y=JSON.parse('{"title":"(五)语句","description":"","frontmatter":{"title":"(五)语句"},"headers":[],"relativePath":"cs/cpp/sentence.md","filePath":"cs/cpp/sentence.md"}'),l={name:"cs/cpp/sentence.md"};function d(o,s,k,c,r,E){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h2 id="简单语句-simple-statements" tabindex="-1">简单语句（Simple Statements） <a class="header-anchor" href="#简单语句-simple-statements" aria-label="Permalink to &quot;简单语句（Simple Statements）&quot;">​</a></h2><p>空语句中只含有一个单独的分号<code>;</code>，使用时应该加上注释。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// read until we hit end-of-file or find an input equal to sought</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sought)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // null statement</span></span></code></pre></div><p>多余的空语句并非总是无害的。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// disaster: extra semicolon: loop body is this null statement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> svec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) ;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // the while body is the empty statement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iter;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // increment is not part of the loop</span></span></code></pre></div><p>复合语句是指用<mark>花括号</mark>括起来的语句和声明的序列，也叫做块（block）。</p><p>一个块就是一个作用域。在块中引入的名字只能在块内部以及嵌套在块中的子块里访问。通常，名字在有限的区域内可见，该区域从名字定义处开始，到名字所在（最内层）块的结尾处为止。</p><p>语句块不以分号作为结束。</p><h2 id="语句作用域-statement-scope" tabindex="-1">语句作用域（Statement Scope） <a class="header-anchor" href="#语句作用域-statement-scope" aria-label="Permalink to &quot;语句作用域（Statement Scope）&quot;">​</a></h2><p>可以在<code>if</code>、<code>switch</code>、<code>while</code>和<code>for</code>语句的控制结构内定义变量，这些变量只在相应语句的内部可见，一旦语句结束，变量也就超出了其作用范围。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // i is created and initialized on each iteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // error: i is not accessible outside the loop</span></span></code></pre></div><h2 id="条件语句-conditional-statements" tabindex="-1">条件语句（Conditional Statements） <a class="header-anchor" href="#条件语句-conditional-statements" aria-label="Permalink to &quot;条件语句（Conditional Statements）&quot;">​</a></h2><h3 id="if语句-the-if-statement" tabindex="-1">if语句（The if Statement） <a class="header-anchor" href="#if语句-the-if-statement" aria-label="Permalink to &quot;if语句（The if Statement）&quot;">​</a></h3><p><code>if</code>语句的形式：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statement</span></span></code></pre></div><p><code>if-else</code>语句的形式：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statement2</span></span></code></pre></div><p><code>if</code>语句可以嵌套，其中<code>else</code>与离它最近的尚未匹配的<code>if</code>相匹配（就近原则）。</p><h3 id="switch语句-the-switch-statement" tabindex="-1">switch语句（The switch Statement） <a class="header-anchor" href="#switch语句-the-switch-statement" aria-label="Permalink to &quot;switch语句（The switch Statement）&quot;">​</a></h3><p><code>switch</code>语句的形式为。其中<code>case</code>标签必须是整型常量表达式。</p><p><img src="`+n+`" alt="5-1"></p><p><code>default</code>标签：如果没有任何一个<code>case</code>标签能匹配上<code>switch</code>表达式的值，程序将执行<code>default</code>标签后的语句。</p><blockquote><p>通常情况下每个<code>case</code>分支后都应有<code>break</code>语句，且该定义一个<code>default</code>标签。</p></blockquote><p>不允许跨过变量的初始化语句直接跳转到该变量作用域内的另一个位置。如果需要为<code>switch</code>的某个<code>case</code>分支定义并初始化一个变量，则应该把变量定义在块内。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ok: declaration statement within a statement block</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string file_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_file_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="迭代语句-iterative-statements" tabindex="-1">迭代语句（Iterative Statements） <a class="header-anchor" href="#迭代语句-iterative-statements" aria-label="Permalink to &quot;迭代语句（Iterative Statements）&quot;">​</a></h2><h3 id="while语句-the-while-statement" tabindex="-1">while语句（The while Statement） <a class="header-anchor" href="#while语句-the-while-statement" aria-label="Permalink to &quot;while语句（The while Statement）&quot;">​</a></h3><p><code>while</code>语句的形式：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statement</span></span></code></pre></div><p>定义在<code>while</code>条件部分或者循环体内的变量每次迭代都经历从创建到销毁的过程。</p><h3 id="传统的for语句-traditional-for-statement" tabindex="-1">传统的for语句（Traditional for Statement） <a class="header-anchor" href="#传统的for语句-traditional-for-statement" aria-label="Permalink to &quot;传统的for语句（Traditional for Statement）&quot;">​</a></h3><p><code>for</code>语句的形式：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (initializer; condition; expression)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statement</span></span></code></pre></div><p>执行顺序为<code>initializer</code>-&gt;<code>condition</code>-&gt; <code>expression</code>-&gt;<code>condition</code>...。当<code>condition</code>求值为<code>false</code>，跳出循环。</p><p><code>for</code>语句头中定义的对象只在<code>for</code>循环体内可见。</p><h3 id="范围for语句-range-for-statement" tabindex="-1">范围for语句（Range for Statement） <a class="header-anchor" href="#范围for语句-range-for-statement" aria-label="Permalink to &quot;范围for语句（Range for Statement）&quot;">​</a></h3><p>范围<code>for</code>语句的形式：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (declaration : expression)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statement</span></span></code></pre></div><p>其中<code>expression</code>表示一个序列，拥有能返回迭代器的<code>begin</code>和<code>end</code>成员。<code>declaration</code>定义一个变量，每次迭代都会重新定义循环控制变量。</p><h3 id="do-while语句-the-do-while-statement" tabindex="-1">do-while语句（The do-while Statement） <a class="header-anchor" href="#do-while语句-the-do-while-statement" aria-label="Permalink to &quot;do-while语句（The do-while Statement）&quot;">​</a></h3><p><code>do-while</code>语句的形式：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition);</span></span></code></pre></div><p>计算<code>condition</code>的值之前会先执行一次<code>statement</code>。</p><p>因为<code>do-while</code>语句先执行语句或块，再判断条件，所以不允许在条件部分定义变量。</p><h2 id="跳转语句-jump-statements" tabindex="-1">跳转语句（Jump Statements） <a class="header-anchor" href="#跳转语句-jump-statements" aria-label="Permalink to &quot;跳转语句（Jump Statements）&quot;">​</a></h2><p>跳转语句中断当前的执行过程。</p><h3 id="break语句-the-break-statement" tabindex="-1">break语句（The break Statement） <a class="header-anchor" href="#break语句-the-break-statement" aria-label="Permalink to &quot;break语句（The break Statement）&quot;">​</a></h3><p><code>break</code>语句只能出现在迭代语句或者<code>switch</code>语句的内部，负责终止离它最近的<code>while</code>、<code>do-while</code>、<code>for</code>或者<code>switch</code>语句，并从这些语句之后的第一条语句开始执行。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string buf;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // process up to the first blank</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">it)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // #1, leaves the for loop</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // . . .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // break #1 transfers control here</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // remaining &#39;-&#39; processing:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // #2, leaves the switch statement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;+&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // . . .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // end switch</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// end of switch: break #2 transfers control here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // end while</span></span></code></pre></div><h3 id="continue语句-the-continue-statement" tabindex="-1">continue语句（The continue Statement） <a class="header-anchor" href="#continue语句-the-continue-statement" aria-label="Permalink to &quot;continue语句（The continue Statement）&quot;">​</a></h3><p><code>continue</code>语句只能出现在=迭代语句==的内部，负责终止离它最近的循环的当前一次迭代并立即开始下一次迭代。</p><p><code>continue</code>语句中断当前迭代后，具体操作视迭代语句类型而定：</p><ul><li><p>对于<code>while</code>和<code>do-while</code>语句来说，继续判断条件的值。</p></li><li><p>对于传统的<code>for</code>语句来说，继续执行<code>for</code>语句头中的<mark>第三部分</mark>，之后判断条件的值。</p></li><li><p>对于范围<code>for</code>语句来说，是用序列中的下一个元素初始化循环变量。</p></li></ul><h3 id="goto语句-the-goto-statement" tabindex="-1">goto语句（The goto Statement） <a class="header-anchor" href="#goto语句-the-goto-statement" aria-label="Permalink to &quot;goto语句（The goto Statement）&quot;">​</a></h3><p><code>goto</code>语句（labeled statement）是一种特殊的语句，在它之前有一个标识符和一个冒号。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // labeled statement; may be the target of a goto</span></span></code></pre></div><p>标签标识符独立于变量和其他标识符的名字，它们之间不会相互干扰。</p><p><code>goto</code>语句的形式：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label;</span></span></code></pre></div><p><code>goto</code>语句使程序<mark>无条件跳转</mark>到标签为<code>label</code>的语句处执行，但两者必须位于同一个函数内，同时<code>goto</code>语句也不能将程序的控制权从变量的作用域之外转移到作用域之内。</p><blockquote><p>建议不要在程序中使用<code>goto</code>语句，它使得程序既难理解又难修改。</p></blockquote><h2 id="try语句块和异常处理-try-blocks-and-exception-handling" tabindex="-1">try语句块和异常处理（try Blocks and Exception Handling） <a class="header-anchor" href="#try语句块和异常处理-try-blocks-and-exception-handling" aria-label="Permalink to &quot;try语句块和异常处理（try Blocks and Exception Handling）&quot;">​</a></h2><p>异常（exception）是指程序运行时的反常行为，这些行为超出了函数正常功能的范围。</p><p>异常处理机制包括<code>throw</code>表达式（throw expression）、<code>try</code>语句块（try block）和异常类（exception class）。</p><ul><li><p>异常检测部分使用<code>throw</code>表达式表示它遇到了无法处理的问题（<code>throw</code>引发了异常）。</p></li><li><p>异常处理部分使用<code>try</code>语句块处理异常。<code>try</code>语句块以关键字<code>try</code>开始，并以一个或多个<code>catch</code>子句（catch clause）结束。<code>try</code>语句块中代码抛出的异常通常会被某个<code>catch</code>子句处理，<code>catch</code>子句也被称作异常处理代码（exception handler）。</p></li><li><p>异常类用于在<code>throw</code>表达式和相关的<code>catch</code>子句之间传递异常的具体信息。</p></li></ul><h3 id="throw表达式-a-throw-expression" tabindex="-1">throw表达式（A throw Expression） <a class="header-anchor" href="#throw表达式-a-throw-expression" aria-label="Permalink to &quot;throw表达式（A throw Expression）&quot;">​</a></h3><p><code>throw</code>表达式包含关键字<code>throw</code>和紧随其后的一个表达式，其中表达式的类型就是<mark>抛出的异常类型</mark>。</p><h3 id="try语句块-the-try-block" tabindex="-1">try语句块（The try Block） <a class="header-anchor" href="#try语句块-the-try-block" aria-label="Permalink to &quot;try语句块（The try Block）&quot;">​</a></h3><p><code>try</code>语句块的通用形式：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">declaration)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">declaration)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // . . .</span></span></code></pre></div><p><code>try</code>与<code>catch</code>语句块为各自独立的作用域。</p><p>当异常匹配到某个<code>catch</code>子句后，执行与之对应的块，之后跳过剩余的所有<code>catch</code>子句。</p><p>如果没能找到相匹配的<code>catch</code>子句，程序会执行名为<code>terminate</code>的标准库函数。该函数的行为与系统有关，一般情况下，执行该函数将导致程序非正常退出。</p><h3 id="标准异常-standard-exceptions" tabindex="-1">标准异常（Standard Exceptions） <a class="header-anchor" href="#标准异常-standard-exceptions" aria-label="Permalink to &quot;标准异常（Standard Exceptions）&quot;">​</a></h3><p>异常类分别定义在4个头文件中：</p><ul><li><p>头文件<code>exception</code>定义了最通用的异常类<code>exception</code>。它只报告异常的发生，不提供任何额外信息。</p></li><li><p>头文件<code>stdexcept</code>定义了几种常用的异常类。</p><p><img src="`+p+'" alt="5-2"></p></li><li><p>头文件<code>new</code>定义了<code>bad_alloc</code>异常类。</p></li><li><p>头文件<code>type_info</code>定义了<code>bad_cast</code>异常类。</p></li></ul><p>标准库异常类的继承体系：</p><p><img src="'+h+'" alt="5-3"></p><p>只能以默认初始化的方式初始化<code>exception</code>、<code>bad_alloc</code>和<code>bad_cast</code>对象，不允许为这些对象提供初始值。其他异常类的对象在初始化时必须提供一个<code>string</code>或一个C风格字符串，通常表示异常信息。<code>what</code>成员函数可以返回该字符串的<code>string</code>副本。</p>',79)])])}const m=i(l,[["render",d]]);export{y as __pageData,m as default};
