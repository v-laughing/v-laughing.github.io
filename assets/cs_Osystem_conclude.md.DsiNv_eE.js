import{_ as a,c as e,o as r,a4 as t}from"./chunks/framework.CBsUJNCA.js";const o="/assets/program-works.CWMtcYtq.jpg",i="/assets/program-link.sW8mZ9pI.jpg",q=JSON.parse('{"title":"程序如何运行","description":"","frontmatter":{},"headers":[],"relativePath":"cs/Osystem/conclude.md","filePath":"cs/Osystem/conclude.md"}'),l={name:"cs/Osystem/conclude.md"},s=t('<h1 id="程序如何运行" tabindex="-1">程序如何运行 <a class="header-anchor" href="#程序如何运行" aria-label="Permalink to &quot;程序如何运行&quot;">​</a></h1><p>在多道程序环境下，要使程序运行，必须先为之创建进程。</p><h2 id="程序运行准备" tabindex="-1">程序运行准备 <a class="header-anchor" href="#程序运行准备" aria-label="Permalink to &quot;程序运行准备&quot;">​</a></h2><p>创建进程的第一件事，便是将程序和数据装入内存。这其中包括三个步骤：编译、链接、装入。</p><h3 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h3><p>由编译程序(Compiler)将用户源代码编译成cpu可执行的若干目标模块。程序中的地址为逻辑地址。</p><h3 id="链接" tabindex="-1">链接 <a class="header-anchor" href="#链接" aria-label="Permalink to &quot;链接&quot;">​</a></h3><p>由链接程序(Linker)将目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块(Load Module)。</p><h3 id="装入" tabindex="-1">装入 <a class="header-anchor" href="#装入" aria-label="Permalink to &quot;装入&quot;">​</a></h3><p>由装入程序(Loader)将装入模块装入物理内存。需要进行地址重定位：把逻辑地址转换成物理内存绝对地址。</p><p><img src="'+o+'" alt="image"></p><h2 id="程序的链接" tabindex="-1">程序的链接 <a class="header-anchor" href="#程序的链接" aria-label="Permalink to &quot;程序的链接&quot;">​</a></h2><p><img src="'+i+'" alt="image"></p><p>根据链接时间的不同，可把链接分成如下三种：</p><ul><li><strong>静态链接</strong>。在程序运行之前，先将各目标模块及它们所需的库函数，链接成一个完整的装配模块。</li><li><strong>装入时动态链接</strong>。在装入内存时，采用边装入边链接的链接方式。</li><li><strong>运行时动态链接</strong>。在程序执行中需要该目标模块时，才对它进行的链接和装入。加快装入速度，节省内存空间。</li></ul><h2 id="程序的装入" tabindex="-1">程序的装入 <a class="header-anchor" href="#程序的装入" aria-label="Permalink to &quot;程序的装入&quot;">​</a></h2><h3 id="绝对装入方式" tabindex="-1">绝对装入方式 <a class="header-anchor" href="#绝对装入方式" aria-label="Permalink to &quot;绝对装入方式&quot;">​</a></h3><p>在编译时，如果知道程序将驻留在内存的什么位置，那么，编译程序将产生<mark>绝对地址的目标代码</mark>。只适用于单道程序环境。</p><h3 id="可重定位装入方式" tabindex="-1">可重定位装入方式 <a class="header-anchor" href="#可重定位装入方式" aria-label="Permalink to &quot;可重定位装入方式&quot;">​</a></h3><p>在装入时，完成虚拟地址到内存地址的映射。</p><p>缺点：</p><ul><li>程序重定位之后就<mark>不能在内存中搬动</mark>了。</li><li>要求程序的存储空间是连续的，不能把程序放在若干个不连续的区域中。</li></ul><h3 id="动态运行时装入方式" tabindex="-1">动态运行时装入方式 <a class="header-anchor" href="#动态运行时装入方式" aria-label="Permalink to &quot;动态运行时装入方式&quot;">​</a></h3><p>在程序执行过程中进行地址变换，这意味着目标模块装入内存时无需修改地址。 为使地址转换不影响指令的执行速度，这种方式需要一个<mark>重定位寄存器</mark>的支持</p>',24),n=[s];function c(h,d,p,m,u,_){return r(),e("div",null,n)}const b=a(l,[["render",c]]);export{q as __pageData,b as default};
